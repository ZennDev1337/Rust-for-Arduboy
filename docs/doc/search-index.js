var searchIndex = JSON.parse('{\
"arduboy_rust":{"doc":"This is the arduboy_rust crate To get started import the …","t":"AAAAAOOOOOAAODNERRRDDRNMAMMMMMFFFFFDARRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRAAFFFFFFFFFFFFFFFFFFFFFRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRAAAAAFFFFDDDRDOOOOOMOQQIIFFKKFFKFKFFDAARRRRRDRRRRRRRRMLLLLRRRRRDDEGGDDDDNDDDNDDLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDIEEDLLLLLLLLLLLLLLLLLLLLLLLLLDDIDDDDDDDILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRRRDDDRRRNDERRDDDRRRRRRRDDDRRRRRDDRRDRNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGGGGGGGGGGGLLLLLLLLLLFLLFLLLLLLLLLLLLLLLOOLLLLMLLLLLLLLLLLLLLLLLAALOOLLOOOOOOLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLOOLFFLLALLLLLLLLLLALFLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMMMMFFFFFFFFFFFFFFFFFFFFFRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRQQIIFFKKFFLLLKFLLLKFFFFFFFRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR","n":["arduboy2_library","arduboy_tones_library","arduboyfx_library","arduino_system","ardvoice_library","f","get_ardvoice_tone_addr","get_sprite_addr","get_string_addr","get_tones_addr","hardware","prelude","progmem","Arduboy2","Black","Color","FONT_HEIGHT","FONT_WIDTH","HEIGHT","Point","Rect","WIDTH","White","height","sprites","width","x","x","y","y","draw_erase","draw_external_mask","draw_override","draw_plus_mask","draw_self_masked","ArduboyTones","tones_pitch","NOTE_A0","NOTE_A0H","NOTE_A1","NOTE_A1H","NOTE_A2","NOTE_A2H","NOTE_A3","NOTE_A3H","NOTE_A4","NOTE_A4H","NOTE_A5","NOTE_A5H","NOTE_A6","NOTE_A6H","NOTE_A7","NOTE_A7H","NOTE_A8","NOTE_A8H","NOTE_A9","NOTE_A9H","NOTE_AS0","NOTE_AS0H","NOTE_AS1","NOTE_AS1H","NOTE_AS2","NOTE_AS2H","NOTE_AS3","NOTE_AS3H","NOTE_AS4","NOTE_AS4H","NOTE_AS5","NOTE_AS5H","NOTE_AS6","NOTE_AS6H","NOTE_AS7","NOTE_AS7H","NOTE_AS8","NOTE_AS8H","NOTE_AS9","NOTE_AS9H","NOTE_B0","NOTE_B0H","NOTE_B1","NOTE_B1H","NOTE_B2","NOTE_B2H","NOTE_B3","NOTE_B3H","NOTE_B4","NOTE_B4H","NOTE_B5","NOTE_B5H","NOTE_B6","NOTE_B6H","NOTE_B7","NOTE_B7H","NOTE_B8","NOTE_B8H","NOTE_B9","NOTE_B9H","NOTE_C0","NOTE_C0H","NOTE_C1","NOTE_C1H","NOTE_C2","NOTE_C2H","NOTE_C3","NOTE_C3H","NOTE_C4","NOTE_C4H","NOTE_C5","NOTE_C5H","NOTE_C6","NOTE_C6H","NOTE_C7","NOTE_C7H","NOTE_C8","NOTE_C8H","NOTE_C9","NOTE_C9H","NOTE_CS0","NOTE_CS0H","NOTE_CS1","NOTE_CS1H","NOTE_CS2","NOTE_CS2H","NOTE_CS3","NOTE_CS3H","NOTE_CS4","NOTE_CS4H","NOTE_CS5","NOTE_CS5H","NOTE_CS6","NOTE_CS6H","NOTE_CS7","NOTE_CS7H","NOTE_CS8","NOTE_CS8H","NOTE_CS9","NOTE_CS9H","NOTE_D0","NOTE_D0H","NOTE_D1","NOTE_D1H","NOTE_D2","NOTE_D2H","NOTE_D3","NOTE_D3H","NOTE_D4","NOTE_D4H","NOTE_D5","NOTE_D5H","NOTE_D6","NOTE_D6H","NOTE_D7","NOTE_D7H","NOTE_D8","NOTE_D8H","NOTE_D9","NOTE_D9H","NOTE_DS0","NOTE_DS0H","NOTE_DS1","NOTE_DS1H","NOTE_DS2","NOTE_DS2H","NOTE_DS3","NOTE_DS3H","NOTE_DS4","NOTE_DS4H","NOTE_DS5","NOTE_DS5H","NOTE_DS6","NOTE_DS6H","NOTE_DS7","NOTE_DS7H","NOTE_DS8","NOTE_DS8H","NOTE_DS9","NOTE_DS9H","NOTE_E0","NOTE_E0H","NOTE_E1","NOTE_E1H","NOTE_E2","NOTE_E2H","NOTE_E3","NOTE_E3H","NOTE_E4","NOTE_E4H","NOTE_E5","NOTE_E5H","NOTE_E6","NOTE_E6H","NOTE_E7","NOTE_E7H","NOTE_E8","NOTE_E8H","NOTE_E9","NOTE_E9H","NOTE_F0","NOTE_F0H","NOTE_F1","NOTE_F1H","NOTE_F2","NOTE_F2H","NOTE_F3","NOTE_F3H","NOTE_F4","NOTE_F4H","NOTE_F5","NOTE_F5H","NOTE_F6","NOTE_F6H","NOTE_F7","NOTE_F7H","NOTE_F8","NOTE_F8H","NOTE_F9","NOTE_F9H","NOTE_FS0","NOTE_FS0H","NOTE_FS1","NOTE_FS1H","NOTE_FS2","NOTE_FS2H","NOTE_FS3","NOTE_FS3H","NOTE_FS4","NOTE_FS4H","NOTE_FS5","NOTE_FS5H","NOTE_FS6","NOTE_FS6H","NOTE_FS7","NOTE_FS7H","NOTE_FS8","NOTE_FS8H","NOTE_FS9","NOTE_FS9H","NOTE_G0","NOTE_G0H","NOTE_G1","NOTE_G1H","NOTE_G2","NOTE_G2H","NOTE_G3","NOTE_G3H","NOTE_G4","NOTE_G4H","NOTE_G5","NOTE_G5H","NOTE_G6","NOTE_G6H","NOTE_G7","NOTE_G7H","NOTE_G8","NOTE_G8H","NOTE_G9","NOTE_G9H","NOTE_GS0","NOTE_GS0H","NOTE_GS1","NOTE_GS1H","NOTE_GS2","NOTE_GS2H","NOTE_GS3","NOTE_GS3H","NOTE_GS4","NOTE_GS4H","NOTE_GS5","NOTE_GS5H","NOTE_GS6","NOTE_GS6H","NOTE_GS7","NOTE_GS7H","NOTE_GS8","NOTE_GS8H","NOTE_GS9","NOTE_GS9H","NOTE_REST","TONES_END","TONES_REPEAT","TONE_HIGH_VOLUME","VOLUME_ALWAYS_HIGH","VOLUME_ALWAYS_NORMAL","VOLUME_IN_TONE","fx","fx_consts","begin","begin_data","begin_data_save","display","display_clear","draw_bitmap","draw_char","draw_frame","draw_loaded_frame","draw_number","draw_string","load_game_state","read_data_array","save_game_state","set_cursor","set_cursor_range","set_cursor_x","set_cursor_y","set_font","set_font_mode","set_frame","FX_DATA_VECTOR_KEY_POINTER","FX_DATA_VECTOR_PAGE_POINTER","FX_SAVE_VECTOR_KEY_POINTER","FX_SAVE_VECTOR_PAGE_POINTER","FX_VECTOR_KEY_VALUE","SFC_ERASE","SFC_JEDEC_ID","SFC_POWERDOWN","SFC_READ","SFC_READSTATUS1","SFC_READSTATUS2","SFC_READSTATUS3","SFC_RELEASE_POWERDOWN","SFC_WRITE","SFC_WRITE_ENABLE","dbfBlack","dbfEndFrame","dbfExtraRow","dbfFlip","dbfInvert","dbfLastFrame","dbfMasked","dbfReverseBlack","dbfWhiteBlack","dbmBlack","dbmEndFrame","dbmFlip","dbmInvert","dbmLastFrame","dbmMasked","dbmNormal","dbmOverwrite","dbmReverse","dbmWhite","dcfBlack","dcfInvert","dcfMasked","dcfProportional","dcfReverseBlack","dcfWhiteBlack","dcmBlack","dcmInvert","dcmMasked","dcmNormal","dcmOverwrite","dcmProportional","dcmReverse","dcmWhite","arduino","c","eeprom","progmem","serial_print","delay","random_between","random_less_than","strlen","EEPROM","EEPROMBYTE","EEPROMBYTECHECKLESS","EEPROM_STORAGE_SPACE_START","Pstring","f","get_ardvoice_tone_addr","get_sprite_addr","get_string_addr","get_tones_addr","pointer","progmem","Parameters","Parameters","Serialprintable","Serialprintlnable","available","begin","default_parameters","default_parameters","end","print","print_2","println","println_2","read","read_as_utf8_str","ArdVoice","buttons","led","A","ANY_BUTTON","A_BUTTON","B","B_BUTTON","ButtonSet","DOWN","DOWN_BUTTON","LEFT","LEFT_BUTTON","RIGHT","RIGHT_BUTTON","UP","UP_BUTTON","flag_set","just_pressed","just_released","not_pressed","pressed","BLUE_LED","GREEN_LED","RED_LED","RGB_OFF","RGB_ON","BinaryHeap","Deque","Entry","FnvIndexMap","FnvIndexSet","HistoryBuffer","IndexMap","IndexSet","LinearMap","Occupied","OccupiedEntry","OldestOrdered","String","Vacant","VacantEntry","Vec","as_mut","as_mut","as_mut_ptr","as_mut_slices","as_mut_str","as_mut_vec","as_ptr","as_ref","as_ref","as_ref","as_ref","as_ref","as_slice","as_slice","as_slices","as_str","back","back_mut","binary_heap","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","capacity","capacity","capacity","capacity","capacity","capacity","capacity","clear","clear","clear","clear","clear","clear","clear","clear","clear_with","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","contains","contains_key","contains_key","default","default","default","default","default","default","default","default","default_parameters","default_parameters","deref","deref","deref","deref_mut","deref_mut","difference","drop","drop","drop","drop","ends_with","entry","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend_from_slice","extend_from_slice","first","first","first_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_slice","from_str","front","front_mut","get","get","get","get_mut","get_mut","get_mut","hash","hash","hash","hash","index","index","index_mut","index_mut","insert","insert","insert","insert","insert","insert","intersection","into","into","into","into","into","into","into","into","into","into","into","into","into_array","into_bytes","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_mut","into_vec","is_disjoint","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_full","is_full","is_subset","is_superset","iter","iter","iter","iter","iter","iter_mut","iter_mut","iter_mut","iter_mut","key","key","keys","keys","last","last","last_mut","len","len","len","len","len","len","ne","ne","ne","new","new","new","new","new","new","new","new","new_with","next","oldest_ordered","partial_cmp","partial_cmp","peek","peek_mut","pop","pop","pop","pop_back","pop_back_unchecked","pop_front","pop_front_unchecked","pop_unchecked","pop_unchecked","print_2","println_2","push","push","push","push_back","push_back_unchecked","push_front","push_front_unchecked","push_str","push_unchecked","push_unchecked","recent","remove","remove","remove","remove","remove","remove_entry","resize","resize_default","retain","retain_mut","set_len","sorted_linked_list","starts_with","swap_remove","swap_remove","swap_remove_unchecked","symmetric_difference","truncate","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","values","values","values_mut","values_mut","write","write_char","write_str","write_str","BinaryHeap","Kind","Max","Min","PeekMut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref_mut","drop","from","from","from","into","into","into","pop","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","FindMut","Iter","Kind","LinkedIndexU16","LinkedIndexU8","LinkedIndexUsize","Max","Min","Node","SortedLinkedList","SortedLinkedListIndex","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","cmp","cmp","deref","deref_mut","drop","drop","eq","eq","eq","find_mut","finish","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into_iter","is_empty","is_full","iter","new_u16","new_u8","new_usize","next","partial_cmp","partial_cmp","partial_cmp","peek","pop","pop","pop_unchecked","push","push_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","A","ANY_BUTTON","A_BUTTON","ArdVoice","Arduboy2","ArduboyTones","B","BLUE_LED","B_BUTTON","Black","ButtonSet","Color","DOWN","DOWN_BUTTON","EEPROM","EEPROMBYTE","EEPROMBYTECHECKLESS","EEPROM_STORAGE_SPACE_START","FONT_HEIGHT","FONT_WIDTH","GREEN_LED","HEIGHT","LEFT","LEFT_BUTTON","LinearMap","Point","Pstring","RED_LED","RGB_OFF","RGB_ON","RIGHT","RIGHT_BUTTON","Rect","String","UP","UP_BUTTON","Vec","WIDTH","White","audio_enabled","audio_off","audio_on","audio_on_and_save","audio_save_on_off","audio_toggle","begin","bitor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buttons_state","c_char","c_double","c_float","c_int","c_long","c_longlong","c_size_t","c_uchar","c_uint","c_ulong","c_ulonglong","clear","clone","clone","clone","clone","clone","cmp","cmp","collide_point","collide_rect","constrain","default_parameters","default_parameters","delay","digital_write_rgb","digital_write_rgb_single","display","display_and_clear_buffer","draw_circle","draw_fast_hline","draw_fast_vline","draw_pixel","draw_rect","draw_round_rect","draw_triangle","eq","eq","every_x_frames","exit_to_bootloader","f","f","fill_circle","fill_rect","fill_round_rect","fill_triangle","flag_set","flip_horizontal","flip_vertical","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","fx","fx_consts","get","get_ardvoice_tone_addr","get_ardvoice_tone_addr","get_direct","get_pixel","get_sprite_addr","get_sprite_addr","get_string_addr","get_string_addr","get_tones_addr","get_tones_addr","hash","hash","height","idle","init","init","init_random_seed","into","into","into","into","into","into","into","into","into","into","into","invert","is_voice_playing","just_pressed","just_released","new","new","new","new","new","new","next_frame","no_tone","not","not_pressed","partial_cmp","partial_cmp","play_voice","play_voice_complex","playing","pointer","poll_buttons","pressed","print","print_2","println_2","progmem","progmem","put","random_between","random_less_than","read","read","serial","set_cursor","set_cursor_x","set_cursor_y","set_frame_rate","set_rgb_led","set_rgb_led_single","set_text_background_color","set_text_color","set_text_size","set_text_wrap","sprites","stop_voice","strlen","tone","tone2","tone3","tones","tones_in_ram","tones_pitch","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","update","volume_mode","width","write","write","x","x","y","y","begin","begin_data","begin_data_save","display","display_clear","draw_bitmap","draw_char","draw_frame","draw_loaded_frame","draw_number","draw_string","load_game_state","read_data_array","save_game_state","set_cursor","set_cursor_range","set_cursor_x","set_cursor_y","set_font","set_font_mode","set_frame","FX_DATA_VECTOR_KEY_POINTER","FX_DATA_VECTOR_PAGE_POINTER","FX_SAVE_VECTOR_KEY_POINTER","FX_SAVE_VECTOR_PAGE_POINTER","FX_VECTOR_KEY_VALUE","SFC_ERASE","SFC_JEDEC_ID","SFC_POWERDOWN","SFC_READ","SFC_READSTATUS1","SFC_READSTATUS2","SFC_READSTATUS3","SFC_RELEASE_POWERDOWN","SFC_WRITE","SFC_WRITE_ENABLE","dbfBlack","dbfEndFrame","dbfExtraRow","dbfFlip","dbfInvert","dbfLastFrame","dbfMasked","dbfReverseBlack","dbfWhiteBlack","dbmBlack","dbmEndFrame","dbmFlip","dbmInvert","dbmLastFrame","dbmMasked","dbmNormal","dbmOverwrite","dbmReverse","dbmWhite","dcfBlack","dcfInvert","dcfMasked","dcfProportional","dcfReverseBlack","dcfWhiteBlack","dcmBlack","dcmInvert","dcmMasked","dcmNormal","dcmOverwrite","dcmProportional","dcmReverse","dcmWhite","Parameters","Parameters","Serialprintable","Serialprintlnable","available","begin","default_parameters","default_parameters","end","print","print","print","print","print_2","println","println","println","println","println_2","read","read_as_utf8_str","draw_erase","draw_external_mask","draw_override","draw_plus_mask","draw_self_masked","NOTE_A0","NOTE_A0H","NOTE_A1","NOTE_A1H","NOTE_A2","NOTE_A2H","NOTE_A3","NOTE_A3H","NOTE_A4","NOTE_A4H","NOTE_A5","NOTE_A5H","NOTE_A6","NOTE_A6H","NOTE_A7","NOTE_A7H","NOTE_A8","NOTE_A8H","NOTE_A9","NOTE_A9H","NOTE_AS0","NOTE_AS0H","NOTE_AS1","NOTE_AS1H","NOTE_AS2","NOTE_AS2H","NOTE_AS3","NOTE_AS3H","NOTE_AS4","NOTE_AS4H","NOTE_AS5","NOTE_AS5H","NOTE_AS6","NOTE_AS6H","NOTE_AS7","NOTE_AS7H","NOTE_AS8","NOTE_AS8H","NOTE_AS9","NOTE_AS9H","NOTE_B0","NOTE_B0H","NOTE_B1","NOTE_B1H","NOTE_B2","NOTE_B2H","NOTE_B3","NOTE_B3H","NOTE_B4","NOTE_B4H","NOTE_B5","NOTE_B5H","NOTE_B6","NOTE_B6H","NOTE_B7","NOTE_B7H","NOTE_B8","NOTE_B8H","NOTE_B9","NOTE_B9H","NOTE_C0","NOTE_C0H","NOTE_C1","NOTE_C1H","NOTE_C2","NOTE_C2H","NOTE_C3","NOTE_C3H","NOTE_C4","NOTE_C4H","NOTE_C5","NOTE_C5H","NOTE_C6","NOTE_C6H","NOTE_C7","NOTE_C7H","NOTE_C8","NOTE_C8H","NOTE_C9","NOTE_C9H","NOTE_CS0","NOTE_CS0H","NOTE_CS1","NOTE_CS1H","NOTE_CS2","NOTE_CS2H","NOTE_CS3","NOTE_CS3H","NOTE_CS4","NOTE_CS4H","NOTE_CS5","NOTE_CS5H","NOTE_CS6","NOTE_CS6H","NOTE_CS7","NOTE_CS7H","NOTE_CS8","NOTE_CS8H","NOTE_CS9","NOTE_CS9H","NOTE_D0","NOTE_D0H","NOTE_D1","NOTE_D1H","NOTE_D2","NOTE_D2H","NOTE_D3","NOTE_D3H","NOTE_D4","NOTE_D4H","NOTE_D5","NOTE_D5H","NOTE_D6","NOTE_D6H","NOTE_D7","NOTE_D7H","NOTE_D8","NOTE_D8H","NOTE_D9","NOTE_D9H","NOTE_DS0","NOTE_DS0H","NOTE_DS1","NOTE_DS1H","NOTE_DS2","NOTE_DS2H","NOTE_DS3","NOTE_DS3H","NOTE_DS4","NOTE_DS4H","NOTE_DS5","NOTE_DS5H","NOTE_DS6","NOTE_DS6H","NOTE_DS7","NOTE_DS7H","NOTE_DS8","NOTE_DS8H","NOTE_DS9","NOTE_DS9H","NOTE_E0","NOTE_E0H","NOTE_E1","NOTE_E1H","NOTE_E2","NOTE_E2H","NOTE_E3","NOTE_E3H","NOTE_E4","NOTE_E4H","NOTE_E5","NOTE_E5H","NOTE_E6","NOTE_E6H","NOTE_E7","NOTE_E7H","NOTE_E8","NOTE_E8H","NOTE_E9","NOTE_E9H","NOTE_F0","NOTE_F0H","NOTE_F1","NOTE_F1H","NOTE_F2","NOTE_F2H","NOTE_F3","NOTE_F3H","NOTE_F4","NOTE_F4H","NOTE_F5","NOTE_F5H","NOTE_F6","NOTE_F6H","NOTE_F7","NOTE_F7H","NOTE_F8","NOTE_F8H","NOTE_F9","NOTE_F9H","NOTE_FS0","NOTE_FS0H","NOTE_FS1","NOTE_FS1H","NOTE_FS2","NOTE_FS2H","NOTE_FS3","NOTE_FS3H","NOTE_FS4","NOTE_FS4H","NOTE_FS5","NOTE_FS5H","NOTE_FS6","NOTE_FS6H","NOTE_FS7","NOTE_FS7H","NOTE_FS8","NOTE_FS8H","NOTE_FS9","NOTE_FS9H","NOTE_G0","NOTE_G0H","NOTE_G1","NOTE_G1H","NOTE_G2","NOTE_G2H","NOTE_G3","NOTE_G3H","NOTE_G4","NOTE_G4H","NOTE_G5","NOTE_G5H","NOTE_G6","NOTE_G6H","NOTE_G7","NOTE_G7H","NOTE_G8","NOTE_G8H","NOTE_G9","NOTE_G9H","NOTE_GS0","NOTE_GS0H","NOTE_GS1","NOTE_GS1H","NOTE_GS2","NOTE_GS2H","NOTE_GS3","NOTE_GS3H","NOTE_GS4","NOTE_GS4H","NOTE_GS5","NOTE_GS5H","NOTE_GS6","NOTE_GS6H","NOTE_GS7","NOTE_GS7H","NOTE_GS8","NOTE_GS8H","NOTE_GS9","NOTE_GS9H","NOTE_REST","TONES_END","TONES_REPEAT","TONE_HIGH_VOLUME","VOLUME_ALWAYS_HIGH","VOLUME_ALWAYS_NORMAL","VOLUME_IN_TONE"],"q":[[0,"arduboy_rust"],[13,"arduboy_rust::arduboy2_library"],[30,"arduboy_rust::arduboy2_library::sprites"],[35,"arduboy_rust::arduboy_tones_library"],[37,"arduboy_rust::arduboy_tones_library::tones_pitch"],[284,"arduboy_rust::arduboyfx_library"],[286,"arduboy_rust::arduboyfx_library::fx"],[307,"arduboy_rust::arduboyfx_library::fx_consts"],[355,"arduboy_rust::arduino_system"],[360,"arduboy_rust::arduino_system::arduino"],[363,"arduboy_rust::arduino_system::c"],[364,"arduboy_rust::arduino_system::eeprom"],[368,"arduboy_rust::arduino_system::progmem"],[376,"arduboy_rust::arduino_system::serial_print"],[391,"arduboy_rust::ardvoice_library"],[392,"arduboy_rust::hardware"],[394,"arduboy_rust::hardware::buttons"],[413,"arduboy_rust::hardware::led"],[418,"arduboy_rust::heapless"],[785,"arduboy_rust::heapless::binary_heap"],[815,"arduboy_rust::heapless::sorted_linked_list"],[925,"arduboy_rust::prelude"],[1185,"arduboy_rust::prelude::fx"],[1206,"arduboy_rust::prelude::fx_consts"],[1254,"arduboy_rust::prelude::serial"],[1275,"arduboy_rust::prelude::sprites"],[1280,"arduboy_rust::prelude::tones_pitch"],[1527,"core::option"],[1528,"core::cmp"],[1529,"hash32"],[1530,"hash32"],[1531,"core::clone"],[1532,"core::cmp"],[1533,"core::default"],[1534,"heapless::indexset"],[1535,"core::cmp"],[1536,"core::result"],[1537,"core::fmt"],[1538,"core::fmt"],[1539,"core::hash"],[1540,"heapless::indexmap"],[1541,"heapless::indexset"],[1542,"core::slice::iter"],[1543,"heapless::deque"],[1544,"hash32"],[1545,"core::any"],[1546,"core::fmt"]],"d":["This is the Module to interact in a save way with the …","This is the Module to interact in a save way with the …","This is the Module to interact in a save way with the …","This module contains all the Arduino system functions to …","This is the Module to interact in a save way with the …","This is the way to go if you want print some random text","Create a <code>const</code> raw pointer to a ardvoice tone as u8, …","Create a <code>const</code> raw pointer to a sprite as u8, without …","Create a <code>const</code> raw pointer to a [u8;_] that saves text, …","Create a <code>const</code> raw pointer to a tone sequenze as u16, …","This is the Module to interact in a save way with the …","This is the important one to use this library effective in …","Create a space for Progmem variable","This is the struct to interact in a save way with the …","Led is off","This item is to chose between Black or White","","The standard font size of the arduboy","The standard height of the arduboy","This struct is used by a few Arduboy functions.","This struct is used by a few Arduboy functions.","The standard width of the arduboy","Led is on","Rect height","This is the module to interact in a save way with the …","Rect width","Position X","Position X","Position Y","Position Y","“Erase” a sprite.","Draw a sprite using a separate image and mask array.","Draw a sprite by replacing the existing content completely.","Draw a sprite using an array containing both image and …","Draw a sprite using only the bits set to 1.","This is the struct to interact in a save way with the …","A list of all tones available and used by the Sounds …unctions given by the ArduboyFX library.","Consts given by the ArduboyFX library.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This is the Module to interact in a save way with the …","Clib functions you can use on the Arduboy","This is the module to interact with the eeprom memory","This is the module to interact with the progmem memory","This is the Module to interact in a save way with the …","A Arduino function to pause the cpu circles for a given …","A Arduino function to get a random number between 2 numbers","A Arduino function to get a random number smaller than the …","A C function to get the length of a string","This is the struct to store and read structs objects …","Use this struct to store and read single bytes to/from …","Use this struct to store and read single bytes to/from …","","This struct is important for the Progmem functionality.","This is the way to go if you want print some random text","Create a <code>const</code> raw pointer to a ardvoice tone as u8, …","Create a <code>const</code> raw pointer to a sprite as u8, without …","Create a <code>const</code> raw pointer to a [u8;_] that saves text, …","Create a <code>const</code> raw pointer to a tone sequenze as u16, …","","Create a space for Progmem variable","","","","","Get the number of bytes (characters) available for reading …","Sets the data rate in bits per second (baud) for serial …","","","Disables serial communication, allowing the RX and TX pins …","The Arduino Serial Print class is available for writing …","","The Arduino Serial Print class is available for writing …","","Reads incoming serial data. Use only inside of available():","Reads incoming serial data.","This is the struct to interact in a save way with the …","A list of all six buttons available on the Arduboy","A list of all LED variables available","Just a <code>const</code> for the A button","Just a <code>const</code> for the any","Just a <code>const</code> for the A button","Just a <code>const</code> for the B button","Just a <code>const</code> for the B button","This struct gives the library a understanding what Buttons …","Just a <code>const</code> for the DOWN button","Just a <code>const</code> for the DOWN button","Just a <code>const</code> for the LEFT button","Just a <code>const</code> for the LEFT button","Just a <code>const</code> for the RIGHT button","Just a <code>const</code> for the RIGHT button","Just a <code>const</code> for the UP button","Just a <code>const</code> for the UP button","","","","","","Just a <code>const</code> for the blue led","Just a <code>const</code> for the green led","Just a <code>const</code> for the red led","Just a <code>const</code> for led off","Just a <code>const</code> for led on","A priority queue implemented with a binary heap.","A fixed capacity double-ended queue.","A view into an entry in the map","A <code>heapless::IndexMap</code> using the default FNV hasher","A <code>heapless::IndexSet</code> using the default FNV hasher. A list …","A “history buffer”, similar to a write-only ring …","Fixed capacity <code>IndexMap</code>","Fixed capacity <code>IndexSet</code>.","A fixed capacity map / dictionary that performs lookups …","The entry corresponding to the key <code>K</code> exists in the map","An occupied entry which can be manipulated","An iterator on the underlying buffer ordered from oldest …","A fixed capacity <code>String</code>","The entry corresponding to the key <code>K</code> does not exist in the …","A view into an empty slot in the underlying map","A fixed capacity <code>Vec</code>","","","Returns a raw pointer to the vector’s buffer, which may …","Returns a pair of mutable slices which contain, in order, …","Converts a <code>String</code> into a mutable string slice.","Returns a mutable reference to the contents of this <code>String</code>.","Returns a raw pointer to the vector’s buffer.","","","","","","Returns the array slice backing the buffer, without …","Extracts a slice containing the entire vector.","Returns a pair of slices which contain, in order, the …","Extracts a string slice containing the entire string.","Provides a reference to the back element, or None if the …","Provides a mutable reference to the back element, or None …","A priority queue implemented with a binary heap.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the maximum number of elements the deque can hold.","Returns the capacity of the buffer, which is the length of …","Returns the number of elements the map can hold","Returns the number of elements the set can hold","Returns the number of elements that the map can hold","Returns the maximum number of elements the String can hold","Returns the maximum number of elements the vector can hold.","Returns the capacity of the binary heap.","Clears the deque, removing all values.","Clears the buffer, replacing every element with the …","Remove all key-value pairs in the map, while preserving …","Clears the set, removing all values.","Clears the map, removing all key-value pairs","Truncates this <code>String</code>, removing all contents.","Clears the vector, removing all values.","Drops all items from the binary heap.","Clears the buffer, replacing every element with the given …","","","","","","","","","","","Returns <code>true</code> if the set contains a value.","Returns true if the map contains a value for the specified …","Returns true if the map contains a value for the specified …","","","","","","","","","","","","","","","","Visits the values representing the difference, i.e. the …","","","","","Returns <code>true</code> if <code>needle</code> is a suffix of the Vec.","Returns an entry for the corresponding key","","","","","","","","","","","","","","","","","","","","","Extends the vec from an iterator.","Clones and writes all elements in a slice to the buffer.","Clones and appends all elements in a slice to the <code>Vec</code>.","Get the first key-value pair","Get the first value","Get the first key-value pair, with mutable access to the …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Constructs a new vector with a fixed capacity of <code>N</code> and …","","Provides a reference to the front element, or None if the …","Provides a mutable reference to the front element, or None …","Gets a reference to the value associated with this entry","Returns a reference to the value corresponding to the key.","Returns a reference to the value corresponding to the key","Gets a mutable reference to the value associated with this …","Returns a mutable reference to the value corresponding to …","Returns a mutable reference to the value corresponding to …","","","","","","","","","Overwrites the underlying map’s value with this entry’…","Inserts this entry into to underlying map, yields a …","Inserts a key-value pair into the map.","Adds a value to the set.","Inserts a key-value pair into the map.","Inserts an element at position <code>index</code> within the vector, …","Visits the values representing the intersection, i.e. the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the contents of the vector as an array of length <code>M</code> …","Converts a <code>String</code> into a byte vector.","","","","","","","","","","","","","","Consumes this entry to yield to key associated with it","Consumes this entry and yields a reference to the …","Returns the underlying <code>Vec&lt;T,N&gt;</code>. Order is arbitrary and …","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …","Returns whether the deque is empty.","Returns true if the map contains no elements.","Returns <code>true</code> if the set contains no elements.","Returns true if the map contains no elements","Returns true if the vec is empty","Checks if the binary heap is empty.","Returns whether the deque is full (i.e. if …","Returns true if the vec is full","Returns <code>true</code> if the set is a subset of another, i.e. <code>other</code> …","Examples","Returns an iterator over the deque.","Return an iterator over the key-value pairs of the map, in …","Return an iterator over the values of the set, in their …","An iterator visiting all key-value pairs in arbitrary …","Returns an iterator visiting all values in the underlying …","Returns an iterator that allows modifying each value.","Return an iterator over the key-value pairs of the map, in …","An iterator visiting all key-value pairs in arbitrary …","Returns a mutable iterator visiting all values in the …","Gets a reference to the key that this entity corresponds to","Get the key associated with this entry","Return an iterator over the keys of the map, in their order","An iterator visiting all keys in arbitrary order","Get the last key-value pair","Get the last value","Get the last key-value pair, with mutable access to the …","Returns the number of elements currently in the deque.","Returns the current fill level of the buffer.","Return the number of key-value pairs in the map.","Returns the number of elements in the set.","Returns the number of elements in this map","Returns the length of the binary heap.","","","","Constructs a new, empty deque with a fixed capacity of <code>N</code>","Constructs a new history buffer.","Creates an empty <code>IndexMap</code>.","Creates an empty <code>IndexSet</code>","Creates an empty <code>LinearMap</code>","Constructs a new, empty <code>String</code> with a fixed capacity of <code>N</code> …","Constructs a new, empty vector with a fixed capacity of <code>N</code>","Creates an empty BinaryHeap as a $K-heap.","Constructs a new history buffer, where every element is …","","Returns an iterator for iterating over the buffer from …","","","Returns the <em>top</em> (greatest if max-heap, smallest if …","Returns a mutable reference to the greatest item in the …","Removes the last character from the string buffer and …","Removes the last element from a vector and returns it, or …","Removes the <em>top</em> (greatest if max-heap, smallest if …","Removes the item from the back of the deque and returns …","Removes an item from the back of the deque and returns it, …","Removes the item from the front of the deque and returns …","Removes an item from the front of the deque and returns …","Removes the last element from a vector and returns it","Removes the <em>top</em> (greatest if max-heap, smallest if …","","","Appends the given <code>char</code> to the end of this <code>String</code>.","Appends an <code>item</code> to the back of the collection","Pushes an item onto the binary heap.","Appends an <code>item</code> to the back of the deque","Appends an <code>item</code> to the back of the deque","Appends an <code>item</code> to the front of the deque","Appends an <code>item</code> to the front of the deque","Appends a given string slice onto the end of this <code>String</code>.","Appends an <code>item</code> to the back of the collection","Pushes an item onto the binary heap without first checking …","Returns a reference to the most recently written value.","Removes this entry from the map and yields its value","Same as <code>swap_remove</code>","Removes a value from the set. Returns <code>true</code> if the value …","Removes a key from the map, returning the value at the key …","Removes and returns the element at position <code>index</code> within …","Removes this entry from the map and yields its …","Resizes the Vec in-place so that len is equal to new_len.","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate, …","Forces the length of the vector to <code>new_len</code>.","A fixed sorted priority linked list, similar to <code>BinaryHeap</code> …","Returns <code>true</code> if <code>needle</code> is a prefix of the Vec.","Remove the key-value pair equivalent to <code>key</code> and return its …","Removes an element from the vector and returns it.","Removes an element from the vector and returns it.","Visits the values representing the symmetric difference, …","Shortens this <code>String</code> to the specified length.","Shortens the vector, keeping the first <code>len</code> elements and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Visits the values representing the union, i.e. all the …","Return an iterator over the values of the map, in their …","An iterator visiting all values in arbitrary order","Return an iterator over mutable references to the the …","An iterator visiting all values mutably in arbitrary order","Writes an element to the buffer, overwriting the oldest …","","","","A priority queue implemented with a binary heap.","The binary heap kind: min-heap or max-heap","Max-heap","Min-heap","Structure wrapping a mutable reference to the greatest …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Removes the peeked value from the heap and returns it.","","","","","","","","","","Comes from <code>SortedLinkedList::find_mut</code>.","Iterator for the linked list.","The linked list kind: min-list or max-list","Index for the <code>SortedLinkedList</code> with specific backing …","Index for the <code>SortedLinkedList</code> with specific backing …","Index for the <code>SortedLinkedList</code> with specific backing …","Marker for Max sorted <code>SortedLinkedList</code>.","Marker for Min sorted <code>SortedLinkedList</code>.","A node in the <code>SortedLinkedList</code>.","The linked list.","Trait for defining an index for the linked list, never …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Find an element in the list that can be changed and …","This will resort the element into the correct position in …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if the linked list is empty.","Checks if the linked list is full.","Get an iterator over the sorted list.","Create a new linked list.","Create a new linked list.","Create a new linked list.","","","","","Peek at the first element.","Pops the first element in the list.","This will pop the element from the list.","Pop an element from the list without checking so the list …","Pushes an element to the linked list and sorts it into …","Pushes a value onto the list without checking if the list …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Just a <code>const</code> for the A button","Just a <code>const</code> for the any","Just a <code>const</code> for the A button","This is the struct to interact in a save way with the …","This is the struct to interact in a save way with the …","This is the struct to interact in a save way with the …","Just a <code>const</code> for the B button","Just a <code>const</code> for the blue led","Just a <code>const</code> for the B button","Led is off","This struct gives the library a understanding what Buttons …","This item is to chose between Black or White","Just a <code>const</code> for the DOWN button","Just a <code>const</code> for the DOWN button","This is the struct to store and read structs objects …","Use this struct to store and read single bytes to/from …","Use this struct to store and read single bytes to/from …","","","The standard font size of the arduboy","Just a <code>const</code> for the green led","The standard height of the arduboy","Just a <code>const</code> for the LEFT button","Just a <code>const</code> for the LEFT button","A fixed capacity map / dictionary that performs lookups …","This struct is used by a few Arduboy functions.","This struct is important for the Progmem functionality.","Just a <code>const</code> for the red led","Just a <code>const</code> for led off","Just a <code>const</code> for led on","Just a <code>const</code> for the RIGHT button","Just a <code>const</code> for the RIGHT button","This struct is used by a few Arduboy functions.","A fixed capacity <code>String</code>","Just a <code>const</code> for the UP button","Just a <code>const</code> for the UP button","A fixed capacity <code>Vec</code>","The standard width of the arduboy","Led is on","Get the current sound state.","Turn sound off (mute).","Turn sound on.","Combines the use function of <code>audio_on()</code> and …","Save the current sound state in EEPROM.","Toggle the sound on/off state.","Initialize the hardware, display the boot logo, provide …","","","","","","","","","","","","","","","","","","","","","","","","Get the current state of all buttons as a bitmask.","Equivalent to C’s <code>char</code> type.","Equivalent to C’s <code>double</code> type.","Equivalent to C’s <code>float</code> type.","Equivalent to C’s <code>signed int</code> (<code>int</code>) type.","Equivalent to C’s <code>signed long</code> (<code>long</code>) type.","Equivalent to C’s <code>signed long long</code> (<code>long long</code>) type.","Equivalent to C’s <code>size_t</code> type, from <code>stddef.h</code> (or <code>cstddef</code> …","Equivalent to C’s <code>unsigned char</code> type.","Equivalent to C’s <code>unsigned int</code> type.","Equivalent to C’s <code>unsigned long</code> type.","Equivalent to C’s <code>unsigned long long</code> type.","Clear the display buffer and set the text cursor to …","","","","","","","","Test if a point falls within a rectangle.","Test if a rectangle is intersecting with another rectangle.","","","","A Arduino function to pause the cpu circles for a given …","Set the RGB LEDs digitally, to either fully on or fully …","Set one of the RGB LEDs digitally, to either fully on or …","Copy the contents of the display buffer to the display. …","Copy the contents of the display buffer to the display. …","Draw a circle of a given radius.","Draw a horizontal line.","Draw a vertical line.","Set a single pixel in the display buffer to the specified …","Draw a rectangle of a specified width and height.","Draw a rectangle with rounded corners.","Draw a triangle given the coordinates of each corner.","","","Indicate if the specified number of frames has elapsed.","Exit the sketch and start the bootloader.","This is the way to go if you want print some random text","This is the way to go if you want print some random text","Draw a filled-in circle of a given radius.","Draw a filled-in rectangle of a specified width and height.","Draw a filled-in rectangle with rounded corners.","Draw a filled-in triangle given the coordinates of each …","","Flip the display horizontally or set it back to normal.","Flip the display vertically or set it back to normal.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Functions given by the ArduboyFX library.","Consts given by the ArduboyFX library.","","Create a <code>const</code> raw pointer to a ardvoice tone as u8, …","Create a <code>const</code> raw pointer to a ardvoice tone as u8, …","","Returns the state of the given pixel in the screen buffer.","Create a <code>const</code> raw pointer to a sprite as u8, without …","Create a <code>const</code> raw pointer to a sprite as u8, without …","Create a <code>const</code> raw pointer to a [u8;_] that saves text, …","Create a <code>const</code> raw pointer to a [u8;_] that saves text, …","Create a <code>const</code> raw pointer to a tone sequenze as u16, …","Create a <code>const</code> raw pointer to a tone sequenze as u16, …","","","Rect height","Idle the CPU to save power.","","","Seed the random number generator with a random value.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Invert the entire display or set it back to normal.","","Check if a button has just been pressed.","Check if a button has just been released.","gives you a new instance of the Arduboy2","Get a new instance of ArduboyTones","","","","","Indicate that it’s time to render the next frame.","Stop playing the tone or sequence.","","Test if the specified buttons are not pressed.","","","","","Check if a tone or tone sequence is playing.","","Poll the buttons and track their state over time.","Test if the all of the specified buttons are pressed.","The Arduino Print class is available for writing text to …","","","Create a space for Progmem variable","Create a space for Progmem variable","","A Arduino function to get a random number between 2 numbers","A Arduino function to get a random number smaller than the …","","","This is the Module to interact in a save way with the …","Set the location of the text cursor.","Set the X coordinate of the text cursor location.","Set the Y coordinate of the text cursor location.","Set the frame rate used by the frame control functions.","Set the light output of the RGB LED.","Set the brightness of one of the RGB LEDs without …","Set the text background color.","Set the text foreground color.","Set the text character size.","Set or disable text wrap mode.","This is the module to interact in a save way with the …","","A C function to get the length of a string","Play a single tone.","Play two tones in sequence.","Play three tones in sequence.","Play a tone sequence from frequency/duration pairs in a …","Play a tone sequence from frequency/duration pairs in an …","A list of all tones available and used by the Sounds …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set the volume to always normal, always high, or tone …","Rect width","","","Position X","Position X","Position Y","Position Y","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the number of bytes (characters) available for reading …","Sets the data rate in bits per second (baud) for serial …","","","Disables serial communication, allowing the RX and TX pins …","The Arduino Serial Print class is available for writing …","","","","","The Arduino Serial Print class is available for writing …","","","","","Reads incoming serial data. Use only inside of available():","Reads incoming serial data.","“Erase” a sprite.","Draw a sprite using a separate image and mask array.","Draw a sprite by replacing the existing content completely.","Draw a sprite using an array containing both image and …","Draw a sprite using only the bits set toi":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,0,0,0,0,77,78,0,78,78,79,78,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,0,10,9,0,0,0,0,10,9,0,0,9,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,12,12,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,37,0,0,14,14,14,16,17,17,14,18,17,17,14,14,18,14,16,17,16,16,0,16,18,37,47,51,20,24,25,17,14,26,31,16,18,37,47,51,20,24,25,17,14,26,31,16,18,20,24,25,17,14,26,16,18,20,24,25,17,14,26,18,16,20,24,25,17,14,26,31,17,14,24,20,25,16,18,20,24,25,17,14,26,17,17,18,17,14,17,14,24,16,18,25,14,14,20,20,24,25,17,17,17,14,14,14,14,14,14,18,18,20,20,24,24,14,14,14,18,14,20,24,20,16,18,20,24,25,17,17,14,26,16,18,37,47,51,20,24,25,17,17,17,17,17,17,17,17,17,17,14,26,31,20,24,25,17,17,17,14,14,17,16,16,47,20,25,47,20,25,17,17,14,14,20,25,20,25,47,51,20,24,25,14,24,16,18,37,47,51,20,24,25,17,14,26,31,14,17,16,16,16,20,20,20,24,25,14,14,14,26,31,51,47,26,24,16,20,24,25,14,26,16,14,24,24,16,20,24,25,26,16,20,25,26,47,51,20,25,20,24,20,16,18,20,24,25,26,17,17,17,16,18,20,24,25,17,14,26,18,31,18,17,14,26,26,17,14,26,16,16,16,16,14,26,17,17,17,14,26,16,16,16,16,17,14,26,18,47,20,24,25,14,47,14,14,14,14,14,0,14,20,14,14,24,17,14,16,18,37,47,51,20,24,25,17,14,14,26,31,16,18,37,47,51,20,24,25,17,14,26,31,16,18,37,47,51,20,24,25,17,14,26,31,24,20,25,20,25,18,17,17,14,0,0,0,0,0,88,89,64,88,89,64,64,64,64,88,89,64,88,89,64,64,88,89,64,88,89,64,88,89,64,0,0,0,0,0,0,0,0,0,0,0,90,91,92,74,75,71,68,69,70,90,91,92,74,75,71,68,69,70,68,69,70,68,69,70,71,71,74,71,68,69,70,74,71,74,68,69,70,90,91,92,74,75,71,68,69,70,90,91,92,74,75,71,68,69,70,75,74,74,74,74,74,74,75,68,69,70,74,74,71,74,74,74,90,91,92,74,75,71,68,69,70,90,91,92,74,75,71,68,69,70,90,91,92,74,75,71,68,69,70,0,0,0,0,0,0,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,76,76,76,76,76,76,76,12,76,85,82,83,86,84,12,77,78,79,80,76,85,82,83,86,84,12,77,78,79,80,76,0,0,0,0,0,0,0,0,0,0,0,76,12,77,78,79,80,12,77,76,76,0,80,80,0,76,76,76,76,76,76,76,76,76,76,76,12,77,76,76,0,0,76,76,76,76,12,76,76,12,77,78,79,76,85,82,83,86,84,12,77,78,79,80,0,0,82,0,0,82,76,0,0,0,0,0,0,12,77,78,76,82,83,76,76,85,82,83,86,84,12,77,78,79,80,76,84,76,76,76,85,82,83,86,84,76,85,77,76,12,77,84,84,85,80,76,76,76,80,80,0,0,82,0,0,83,86,0,76,76,76,76,76,76,76,76,76,76,0,84,0,85,85,85,85,85,0,76,85,82,83,86,84,12,77,78,79,80,76,85,82,83,86,84,12,77,78,79,80,76,85,82,83,86,84,12,77,78,79,80,83,86,85,78,83,86,78,79,78,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,9,0,0,0,0,10,9,0,0,9,9,9,9,0,10,10,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1,2,2],3],[[1,1,2,2,2,2],3],[[1,1,2,2],3],[[1,1,2,2],3],[[1,1,2,2],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],3],[4,3],[[4,4],3],[[],3],[[],3],[[1,1,5,2,2],3],[2,3],[5,5],[[],2],[[-1,6],3,0],[-1,3,0],[-1,2,[]],[[5,2,2,2,2,7],3],[-1,3,[]],[[1,1],3],[[1,1],3],[1,3],[1,3],[[5,2],3],[2,3],[[5,2],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[5,3],[[8,8],8],[8,8],[6,7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[5,3],[[]],[[]],[[],3],[-1,3,9],[-1,3,[]],[-1,3,10],[-1,3,[]],[[],1],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[12,13],[12,13],[12,13],[12,13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[14,[-1]]],[[14,[-1]]],[]],[[[14,[-1]]],[[15,[-1]]],[]],[[[14,[-1]]],[],[]],[[[16,[-1]]],[[3,[[15,[-1]],[15,[-1]]]]],[]],[17,11],[17,[[14,[2]]]],[[[14,[-1]]],[],[]],[[[18,[-1]]],[[15,[-1]]],[]],[17,[[15,[2]]]],[17,11],[[[14,[-1]]],[[15,[-1]]],[]],[[[14,[-1]]],[[14,[-1]]],[]],[[[18,[-1]]],[[15,[-1]]],[]],[[[14,[-1]]],[[15,[-1]]],[]],[[[16,[-1]]],[[3,[[15,[-1]],[15,[-1]]]]],[]],[17,11],[[[16,[-1]]],[[19,[-1]]],[]],[[[16,[-1]]],[[19,[-1]]],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[16,[-1]]],7,[]],[[[18,[-1]]],7,[]],[[[20,[-1,-2,-3]]],7,[21,22],[],23],[[[24,[-1,-2]]],7,[21,22],23],[[[25,[-1,-2]]],7,21,[]],[17,7],[[[14,[-1]]],7,[]],[[[26,[-1,-2]]],7,27,28],[[[16,[-1]]],3,[]],[[[18,[-1]]],3,[]],[[[20,[-1,-2,-3]]],3,[21,22],[],23],[[[24,[-1,-2]]],3,[21,22],23],[[[25,[-1,-2]]],3,21,[]],[17,3],[[[14,[-1]]],3,[]],[[[26,[-1,-2]]],3,27,28],[[[18,[-1]],-1],3,[29,30]],[[[16,[-1]]],[[16,[-1]]],30],[[[20,[-1,-2,-3]]],[[20,[-1,-2,-3]]],[21,22,30],30,30],[[[24,[-1,-2]]],[[24,[-1,-2]]],[21,22,30],30],[[[25,[-1,-2]]],[[25,[-1,-2]]],[21,30],30],[17,17],[[[14,[-1]]],[[14,[-1]]],30],[[[26,[-1,-2]]],[[26,[-1,-2]]],[27,30],28],[[[31,[-1]]],[[31,[-1]]],30],[[17,17],32],[[[14,[-1]],[14,[-1]]],32,27],[[[24,[-2,-3]],-1],13,[21,22,33],[[34,[-1]],21,22],23],[[[20,[-2,-3,-4]],-1],13,[21,22,33],[[34,[-1]],21,22],[],23],[[[25,[-1,-2]],-1],13,21,[]],[[],[[16,[-1]]],[]],[[],[[18,[-1]]],[]],[[],[[20,[-1,-2,-3]]],[21,22],[],[23,35]],[[],[[24,[-1,-2]]],[21,22],[23,35]],[[],[[25,[-1,-2]]],21,[]],[[],17],[[],[[14,[-1]]],[]],[[],[[26,[-1,-2]]],27,28],[[]],[[]],[[[18,[-1]]],[[15,[-1]]],[]],[17,11],[[[14,[-1]]],[[15,[-1]]],[]],[17,11],[[[14,[-1]]],[[15,[-1]]],[]],[[[24,[-1,-2]],[24,[-1,-3]]],[[36,[-1,-3]]],[21,22],23,23],[[[16,[-1]]],3,[]],[[[18,[-1]]],3,[]],[[[25,[-1,-2]]],3,[],[]],[[[14,[-1]]],3,[]],[[[14,[-1]],[15,[-1]]],13,[]],[[[20,[-1,-2,-3]],-1],[[37,[-1,-2]]],[21,22],[],23],[[[20,[-1,-2,-3]],[20,[-1,-2,-4]]],13,[21,22],21,23,23],[[[24,[-1,-2]],[24,[-1,-3]]],13,[21,22],23,23],[[[25,[-1,-2]],[25,[-1,-2]]],13,21,[]],[[17,17],13],[[17,11],13],[[17,11],13],[[[14,[-2]],[14,[-1]]],13,[],[[38,[-1]]]],[[[14,[-2]],[15,[-1]]],13,[],[[38,[-1]]]],[[[14,[-2]],[15,[-1]]],13,[],[[38,[-1]]]],[[[14,[-2]],[15,[-1]]],13,[],[[38,[-1]]]],[[[14,[-2]],[39,[-1]]],13,[],[[38,[-1]]]],[[[14,[-2]],[39,[-1]]],13,[],[[38,[-1]]]],[[[18,[-1]],-2],3,[],40],[[[18,[-1]],-2],3,30,40],[[[20,[-1,-2,-3]],-4],3,[21,22,29],29,23,40],[[[20,[-1,-2,-3]],-4],3,[21,22],[],23,40],[[[24,[-1,-2]],-3],3,[21,22],23,40],[[[24,[-1,-2]],-3],3,[21,22,29],23,40],[[[14,[-1]],-2],3,29,40],[[[14,[-1]],-2],3,[],40],[[[14,[-1]],-2],3,[],40],[[[18,[-1]],[15,[-1]]],3,30],[[[14,[-1]],[15,[-1]]],[[41,[3,3]]],30],[[[20,[-1,-2,-3]]],[[19,[[3,[-1,-2]]]]],[21,22],[],23],[[[24,[-1,-2]]],[[19,[-1]]],[21,22],23],[[[20,[-1,-2,-3]]],[[19,[[3,[-1,-2]]]]],[21,22],[],23],[[[16,[-1]],42],[[41,[3,43]]],44],[[[18,[-1]],42],[[41,[3,43]]],44],[[[20,[-1,-2,-3]],42],[[41,[3,43]]],[21,22,44],44,23],[[[24,[-1,-2]],42],[[41,[3,43]]],[21,22,44],23],[[[25,[-1,-2]],42],[[41,[3,43]]],[21,44],44],[[17,42],[[41,[3,43]]]],[[17,42],[[41,[3,43]]]],[[[14,[-1]],42],[[41,[3,43]]],44],[[[26,[-1,-2]],42],[[41,[3,43]]],[27,44],28],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[5,17],[11,17],[45,17],[6,17],[2,17],[4,17],[1,17],[-1,-1,[]],[46,17],[8,17],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[20,[-2,-3,-4]]],40,[21,22],[],[23,35]],[-1,[[24,[-2,-3]]],40,[21,22],[23,35]],[-1,[[25,[-2,-3]]],40,21,[]],[-1,17,40],[-1,17,40],[-1,17,40],[-1,[[14,[-2]]],40,[]],[[[15,[-1]]],[[41,[[14,[-1]],3]]],30],[11,[[41,[17]]]],[[[16,[-1]]],[[19,[-1]]],[]],[[[16,[-1]]],[[19,[-1]]],[]],[[[47,[-1,-2]]],-2,[21,22],[]],[[[20,[-2,-3,-4]],-1],[[19,[-3]]],[22,21,33],[[34,[-1]],21,22],[],23],[[[25,[-2,-3]],-1],[[19,[-3]]],[21,33],[[34,[-1]],21],[]],[[[47,[-1,-2]]],-2,[21,22],[]],[[[20,[-2,-3,-4]],-1],[[19,[-3]]],[22,21,33],[[34,[-1]],21,22],[],23],[[[25,[-2,-3]],-1],[[19,[-3]]],[21,33],[[34,[-1]],21],[]],[[17,-1],3,48],[[17,-1],3,49],[[[14,[-1]],-2],3,22,48],[[[14,[-1]],-2],3,50,49],[[[20,[-2,-3,-4]],-1],-3,[21,22,33],[21,22,[34,[-1]]],[],23],[[[25,[-2,-3]],-1],-3,[21,33],[[34,[-1]],21],[]],[[[20,[-2,-3,-4]],-1],-3,[21,22,33],[21,22,[34,[-1]]],[],23],[[[25,[-2,-3]],-1],-3,[21,33],[[34,[-1]],21],[]],[[[47,[-1,-2]],-2],-2,[21,22],[]],[[[51,[-1,-2]],-2],[[41,[-2,-2]]],[21,22],[]],[[[20,[-1,-2,-3]],-1,-2],[[41,[[19,[-2]],[3,[-1,-2]]]]],[21,22],[],23],[[[24,[-1,-2]],-1],[[41,[13,-1]]],[21,22],23],[[[25,[-1,-2]],-1,-2],[[41,[[19,[-2]],[3,[-1,-2]]]]],21,[]],[[[14,[-1]],7,-1],[[41,[3,-1]]],[]],[[[24,[-1,-2]],[24,[-1,-3]]],[[52,[-1,-3]]],[21,22],23,23],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[14,[-1]]],[[41,[[39,[-1]],[14,[-1]]]]],[]],[17,[[14,[2]]]],[[[16,[-1]]],[],[]],[[[16,[-1]]],[],[]],[[[16,[-1]]],[],[]],[[[20,[-1,-2,-3]]],[],[21,22],[],23],[[[20,[-1,-2,-3]]],[],[21,22],[],23],[[[20,[-1,-2,-3]]],[],[21,22],[],23],[[[24,[-1,-2]]],[],[21,22],23],[[[25,[-1,-2]]],[],21,[]],[[[14,[-1]]],[],[]],[[[14,[-1]]],[],[]],[[[14,[-1]]],[],[]],[[[26,[-1,-2]]],[],27,28],[-1,-2,[],[]],[[[51,[-1,-2]]],-1,[21,22],[]],[[[47,[-1,-2]]],-2,[21,22],[]],[[[26,[-1,-2]]],[[14,[-1]]],27,28],[[[24,[-1,-2]],[24,[-1,-3]]],13,[21,22],23,23],[[[16,[-1]]],13,[]],[[[20,[-1,-2,-3]]],13,[21,22],[],23],[[[24,[-1,-2]]],13,[21,22],23],[[[25,[-1,-2]]],13,21,[]],[[[14,[-1]]],13,[]],[[[26,[-1,-2]]],13,27,28],[[[16,[-1]]],13,[]],[[[14,[-1]]],13,[]],[[[24,[-1,-2]],[24,[-1,-3]]],13,[21,22],23,23],[[[24,[-1,-2]],[24,[-1,-3]]],13,[21,22],23,23],[[[16,[-1]]],[[53,[-1]]],[]],[[[20,[-1,-2,-3]]],[[54,[-1,-2]]],[21,22],[],23],[[[24,[-1,-2]]],[[55,[-1]]],[21,22],23],[[[25,[-1,-2]]],[[56,[-1,-2]]],21,[]],[[[26,[-1,-2]]],[[57,[-1]]],27,28],[[[16,[-1]]],[[58,[-1]]],[]],[[[20,[-1,-2,-3]]],[[59,[-1,-2]]],[21,22],[],23],[[[25,[-1,-2]]],[[60,[-1,-2]]],21,[]],[[[26,[-1,-2]]],[[61,[-1]]],27,28],[[[47,[-1,-2]]],-1,[21,22],[]],[[[51,[-1,-2]]],-1,[21,22],[]],[[[20,[-1,-2,-3]]],[[0,[62]]],[21,22],[],23],[[[25,[-1,-2]]],[[0,[62]]],21,[]],[[[20,[-1,-2,-3]]],[[19,[[3,[-1,-2]]]]],[21,22],[],23],[[[24,[-1,-2]]],[[19,[-1]]],[21,22],23],[[[20,[-1,-2,-3]]],[[19,[[3,[-1,-2]]]]],[21,22],[],23],[[[16,[-1]]],7,[]],[[[18,[-1]]],7,[]],[[[20,[-1,-2,-3]]],7,[21,22],[],23],[[[24,[-1,-2]]],7,[21,22],23],[[[25,[-1,-2]]],7,21,[]],[[[26,[-1,-2]]],7,27,28],[[17,17],13],[[17,11],13],[[17,11],13],[[],[[16,[-1]]],[]],[[],[[18,[-1]]],[]],[[],[[20,[-1,-2,[63,[-3]]]]],[],[],[]],[[],[[24,[-1,[63,[-2]]]]],[],[]],[[],[[25,[-1,-2]]],[],[]],[[],17],[[],[[14,[-1]]],[]],[[],[[26,[-1,-2]]],[],[]],[-1,[[18,[-1]]],[29,30]],[[[31,[-1]]],[[19,[-1]]],[]],[[[18,[-1]]],[[31,[-1]]],[]],[[17,17],[[19,[32]]]],[[[14,[-1]],[14,[-1]]],[[19,[32]]],[]],[[[26,[-1,-2]]],[[19,[-1]]],27,28],[[[26,[-1,-2]]],[[19,[[64,[-1,-2]]]]],27,28],[17,[[19,[65]]]],[[[14,[-1]]],[[19,[-1]]],[]],[[[26,[-1,-2]]],[[19,[-1]]],27,28],[[[16,[-1]]],[[19,[-1]]],[]],[[[16,[-1]]],-1,[]],[[[16,[-1]]],[[19,[-1]]],[]],[[[16,[-1]]],-1,[]],[[[14,[-1]]],-1,[]],[[[26,[-1,-2]]],-1,27,28],[17,3],[17,3],[[17,65],[[41,[3,3]]]],[[[14,[-1]],-1],[[41,[3,-1]]],[]],[[[26,[-1,-2]],-1],[[41,[3,-1]]],27,28],[[[16,[-1]],-1],[[41,[3,-1]]],[]],[[[16,[-1]],-1],3,[]],[[[16,[-1]],-1],[[41,[3,-1]]],[]],[[[16,[-1]],-1],3,[]],[[17,11],[[41,[3,3]]]],[[[14,[-1]],-1],3,[]],[[[26,[-1,-2]],-1],3,27,28],[[[18,[-1]]],[[19,[-1]]],[]],[[[47,[-1,-2]]],-2,[21,22],[]],[[[20,[-2,-3,-4]],-1],[[19,[-3]]],[22,21,33],[[34,[-1]],21,22],[],23],[[[24,[-2,-3]],-1],13,[21,22,33],[[34,[-1]],21,22],23],[[[25,[-2,-3]],-1],[[19,[-3]]],[21,33],[[34,[-1]],21],[]],[[[14,[-1]],7],-1,[]],[[[47,[-1,-2]]],[[3,[-1,-2]]],[21,22],[]],[[[14,[-1]],7,-1],[[41,[3,3]]],30],[[[14,[-1]],7],[[41,[3,3]]],[30,35]],[[[14,[-1]],-2],3,[],66],[[[14,[-1]],-2],3,[],66],[[[14,[-1]],7],3,[]],0,[[[14,[-1]],[15,[-1]]],13,[]],[[[20,[-2,-3,-4]],-1],[[19,[-3]]],[22,21,33],[[34,[-1]],21,22],[],23],[[[14,[-1]],7],-1,[]],[[[14,[-1]],7],-1,[]],[[[24,[-1,-2]],[24,[-1,-3]]],[[0,[62]]],[21,22],23,23],[[17,7],3],[[[14,[-1]],7],3,[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[[[15,[-1]]],[[41,[[14,[-1]]]]],30],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[[[24,[-1,-2]],[24,[-1,-3]]],[[0,[62]]],[21,22],23,23],[[[20,[-1,-2,-3]]],[[0,[62]]],[21,22],[],23],[[[25,[-1,-2]]],[[0,[62]]],21,[]],[[[20,[-1,-2,-3]]],[[0,[62]]],[21,22],[],23],[[[25,[-1,-2]]],[[0,[62]]],21,[]],[[[18,[-1]],-1],3,[]],[[17,65],[[41,[3,43]]]],[[17,11],[[41,[3,43]]]],[[[14,[2]],11],[[41,[3,43]]]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[64,[-1,-2]]],-1,27,28],[[[64,[-1,-2]]],-1,27,28],[[[64,[-1,-2]]],3,27,28],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[64,[-1,-2]]],-1,27,28],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[68,68],[69,69],[70,70],[[68,68],32],[[69,69],32],[[70,70],32],[[[71,[-1,-2,-3]]],[],27,72,73],[[[71,[-1,-2,-3]]],[],27,72,73],[[[74,[-1,-2,-3]]],3,[],72,[]],[[[71,[-1,-2,-3]]],3,27,72,73],[[68,68],13],[[69,69],13],[[70,70],13],[[[74,[-1,-2,-3]],-4],[[19,[[71,[-1,-2,-3]]]]],27,72,73,66],[[[71,[-1,-2,-3]]],3,27,72,73],[[[74,[-1,-2,-3]],42],[[41,[3,43]]],[27,44],72,73],[[68,42],[[41,[3,43]]]],[[69,42],[[41,[3,43]]]],[[70,42],[[41,[3,43]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[74,[-1,-2,-3]]],13,27,72,73],[[[74,[-1,-2,-3]]],13,27,72,73],[[[74,[-1,-2,-3]]],[[75,[-1,-2,-3]]],27,72,73],[[],[[74,[-1,69,-2]]],[],[]],[[],[[74,[-1,68,-2]]],[],[]],[[],[[74,[-1,70,-2]]],[],[]],[[[75,[-1,-2,-3]]],19,27,72,73],[[68,68],[[19,[32]]]],[[69,69],[[19,[32]]]],[[70,70],[[19,[32]]]],[[[74,[-1,-2,-3]]],[[19,[-1]]],27,72,73],[[[74,[-1,-2,-3]]],[[41,[-1,3]]],27,72,73],[[[71,[-1,-2,-3]]],-1,27,72,73],[[[74,[-1,-2,-3]]],-1,27,72,73],[[[74,[-1,-2,-3]],-1],[[41,[3,-1]]],27,72,73],[[[74,[-1,-2,-3]],-1],3,27,72,73],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[76,13],[76,3],[76,3],[76,3],[76,3],[76,3],[76,3],[[12,12],12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[76,2],0,0,0,0,0,0,0,0,0,0,0,[76,3],[12,12],[77,77],[78,78],[79,79],[80,80],[[12,12],32],[[77,77],32],[[76,79,78],13],[[76,78,78],13],[[-1,-1,-1],-1,27],[[]],[[]],[5,3],[[76,2,2,2],3],[[76,2,2],3],[76,3],[76,3],[[76,1,1,2,77],3],[[76,1,1,2,77],3],[[76,1,1,2,77],3],[[76,1,1,77],3],[[76,1,1,2,2,77],3],[[76,1,1,2,2,2,77],3],[[76,1,1,1,1,1,1,77],3],[[12,12],13],[[77,77],13],[[76,2],13],[76,3],0,0,[[76,1,1,2,77],3],[[76,1,1,2,2,77],3],[[76,1,1,2,2,2,77],3],[[76,1,1,1,1,1,1,77],3],0,[[76,13],3],[[76,13],3],[[12,42],81],[[77,42],81],[[78,42],81],[[79,42],81],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,[[82,-1],3,[]],0,0,[82,-1,[]],[[76,2,2],77],0,0,0,0,0,0,[[12,-1],3,49],[[77,-1],3,49],0,[76,3],[[82,-1],3,[]],[83,3],[76,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[76,13],3],[84,13],[[76,12],13],[[76,12],13],[[],76],[[],85],[1,82],[1,83],[1,86],[[],84],[76,13],[85,3],[77],[[76,12],13],[[12,12],[[19,[32]]]],[[77,77],[[19,[32]]]],[[84,2],3],[[84,2,5,5,87],3],[85,13],0,[76,3],[[76,12],13],[[76,-1],3,0],[80,3],[80,3],0,0,[[82,-1],3,[]],[[8,8],8],[8,8],[83,2],[86,2],0,[[76,1,1],3],[[76,1],3],[[76,1],3],[[76,2],3],[[76,2,2,2],3],[[76,2,2],3],[[76,77],3],[[76,77],3],[[76,2],3],[[76,13],3],0,[84,3],[6,7],[[85,4,5],3],[[85,4,5,4,5],3],[[85,4,5,4,5,4,5],3],[[85,4],3],[[85,5],3],0,[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,[[41,[-2]]],[],[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[[83,2],3],[[86,2],3],[[85,2],3],0,[[83,2],3],[[86,2],3],0,0,0,0,[[],3],[4,3],[[4,4],3],[[],3],[[],3],[[1,1,5,2,2],3],[2,3],[5,5],[[],2],[[-1,6],3,0],[-1,3,0],[-1,2,[]],[[5,2,2,2,2,7],3],[-1,3,[]],[[1,1],3],[[1,1],3],[1,3],[1,3],[[5,2],3],[2,3],[[5,2],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[5,3],[[]],[[]],[[],3],[-1,3,9],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,10],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[[],1],[[],11],[[1,1,2,2],3],[[1,1,2,2,2,2],3],[[1,1,2,2],3],[[1,1,2,2],3],[[1,1,2,2],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[],"p":[[15,"i16"],[15,"u8"],[15,"tuple"],[15,"u16"],[15,"u32"],[15,"i8"],[15,"usize"],[15,"i32"],[8,"Serialprintable",1254],[8,"Serialprintlnable",1254],[15,"str"],[3,"ButtonSet",925],[15,"bool"],[3,"Vec",418],[15,"slice"],[3,"Deque",418],[3,"String",418],[3,"HistoryBuffer",418],[4,"Option",1527],[3,"IndexMap",418],[8,"Eq",1528],[8,"Hash",1529],[8,"BuildHasher",1529],[3,"IndexSet",418],[3,"LinearMap",418],[3,"BinaryHeap",418],[8,"Ord",1528],[8,"Kind",785],[8,"Copy",1530],[8,"Clone",1531],[3,"OldestOrdered",418],[4,"Ordering",1528],[8,"Sized",1530],[8,"Borrow",1532],[8,"Default",1533],[3,"Difference",1534],[4,"Entry",418],[8,"PartialEq",1528],[15,"array"],[8,"IntoIterator",1535],[4,"Result",1536],[3,"Formatter",1537],[3,"Error",1537],[8,"Debug",1537],[15,"i64"],[15,"u64"],[3,"OccupiedEntry",418],[8,"Hasher",1529],[8,"Hasher",1538],[8,"Hash",1538],[3,"VacantEntry",418],[3,"Intersection",1534],[3,"Iter",1539],[3,"Iter",1540],[3,"Iter",1534],[3,"Iter",1541],[3,"Iter",1542],[3,"IterMut",1539],[3,"IterMut",1540],[3,"IterMut",1541],[3,"IterMut",1542],[8,"Iterator",1543],[3,"BuildHasherDefault",1529],[3,"PeekMut",785],[15,"char"],[8,"FnMut",1544],[3,"TypeId",1545],[3,"LinkedIndexU8",815],[3,"LinkedIndexU16",815],[3,"LinkedIndexUsize",815],[3,"FindMut",815],[8,"SortedLinkedListIndex",815],[8,"Kind",815],[3,"SortedLinkedList",815],[3,"Iter",815],[3,"Arduboy2",925],[4,"Color",925],[3,"Rect",925],[3,"Point",925],[3,"Pstring",925],[6,"Result",1537],[3,"EEPROM",925],[3,"EEPROMBYTE",925],[3,"ArdVoice",925],[3,"ArduboyTones",925],[3,"EEPROMBYTECHECKLESS",925],[15,"f32"],[4,"Min",785],[4,"Max",785],[3,"Min",815],[3,"Max",815],[3,"Node",815]]},\
"atomic_polyfill":{"doc":"","t":"RNNDDDENNNLLLLLLLLLLLLFLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLL","n":["ATOMIC_BOOL_INIT","AcqRel","Acquire","AtomicBool","AtomicI8","AtomicU8","Ordering","Relaxed","Release","SeqCst","as_ptr","as_ptr","as_ptr","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","compiler_fence","default","default","default","eq","fence","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_mut","from_mut","from_mut","from_mut_slice","from_mut_slice","from_mut_slice","from_ptr","from_ptr","from_ptr","get_mut","get_mut","get_mut","get_mut_slice","get_mut_slice","get_mut_slice","hash","into","into","into","into","into_inner","into_inner","into_inner","load","load","load","new","new","new","spin_loop_hint","store","store","store","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"atomic_polyfill"],[84,"core::fmt"],[85,"core::fmt"],[86,"core::hash"],[87,"core::any"]],"d":["An <code>AtomicBool</code> initialized to <code>false</code>.","Has the effects of both <code>Acquire</code> and <code>Release</code> together: For …","When coupled with a load, if the loaded value was written …","A boolean type which can be safely shared between threads.","An integer type which can be safely shared between threads.","An integer type which can be safely shared between threads.","Atomic memory orderings","No ordering constraints, only atomic operations.","When coupled with a store, all previous operations become …","Like <code>Acquire</code>/<code>Release</code>/<code>AcqRel</code> (for load, store, and …","Returns a mutable pointer to the underlying <code>bool</code>.","Returns a mutable pointer to the underlying integer.","Returns a mutable pointer to the underlying integer.","","","","","","","","","","A compiler memory fence.","Creates an <code>AtomicBool</code> initialized to <code>false</code>.","","","","An atomic fence.","","","","","Converts a <code>bool</code> into an <code>AtomicBool</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Converts an <code>i8</code> into an <code>AtomicI8</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Converts an <code>u8</code> into an <code>AtomicU8</code>.","Get atomic access to a <code>&amp;mut bool</code>.","Get atomic access to a <code>&amp;mut i8</code>.","Get atomic access to a <code>&amp;mut u8</code>.","Get atomic access to a <code>&amp;mut [bool]</code> slice.","Get atomic access to a <code>&amp;mut [i8]</code> slice.","Get atomic access to a <code>&amp;mut [u8]</code> slice.","Creates a new <code>AtomicBool</code> from a pointer.","Creates a new reference to an atomic integer from a …","Creates a new reference to an atomic integer from a …","Returns a mutable reference to the underlying <code>bool</code>.","Returns a mutable reference to the underlying integer.","Returns a mutable reference to the underlying integer.","Get non-atomic access to a <code>&amp;mut [AtomicBool]</code> slice.","Get non-atomic access to a <code>&amp;mut [AtomicI8]</code> slice","Get non-atomic access to a <code>&amp;mut [AtomicU8]</code> slice","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Loads a value from the bool.","Loads a value from the atomic integer.","Loads a value from the atomic integer.","Creates a new <code>AtomicBool</code>.","Creates a new atomic integer.","Creates a new atomic integer.","Signals the processor that it is inside a busy-wait …","Stores a value into the bool.","Stores a value into the atomic integer.","Stores a value into the atomic integer.","","","","","","","","","","","",""],"i":[0,7,7,0,0,0,0,7,7,7,1,3,5,1,7,3,5,1,7,3,5,7,0,1,3,5,7,0,1,7,3,5,1,1,7,3,3,5,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,7,1,7,3,5,1,3,5,1,3,5,1,3,5,0,1,3,5,1,7,3,5,1,7,3,5,1,7,3,5],"f":[0,0,0,0,0,0,0,0,0,0,[1,2],[3,4],[5,6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,7],[7,8],[[],1],[[],3],[[],5],[[7,7],2],[7,8],[[1,9],[[11,[8,10]]]],[[7,9],[[11,[8,10]]]],[[3,9],[[11,[8,10]]]],[[5,9],[[11,[8,10]]]],[2,1],[-1,-1,[]],[-1,-1,[]],[4,3],[-1,-1,[]],[-1,-1,[]],[6,5],[2,1],[4,3],[6,5],[[[12,[2]]],[[12,[1]]]],[[[12,[4]]],[[12,[3]]]],[[[12,[6]]],[[12,[5]]]],[2,1],[4,3],[6,5],[1,2],[3,4],[5,6],[[[12,[1]]],[[12,[2]]]],[[[12,[3]]],[[12,[4]]]],[[[12,[5]]],[[12,[6]]]],[[7,-1],8,13],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[3,4],[5,6],[[1,7],2],[[3,7],4],[[5,7],6],[2,1],[4,3],[6,5],[[],8],[[1,2,7],8],[[3,4,7],8],[[5,6,7],8],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,14,[]]],"c":[0,68],"p":[[3,"AtomicBool",0],[15,"bool"],[3,"AtomicI8",0],[15,"i8"],[3,"AtomicU8",0],[15,"u8"],[4,"Ordering",0],[15,"tuple"],[3,"Formatter",84],[3,"Error",84],[4,"Result",85],[15,"slice"],[8,"Hasher",86],[3,"TypeId",87]]},\
"byteorder":{"doc":"This crate provides convenience methods for encoding and …","t":"GEIGEGGLLLLLLLLLLLLLLLLKLLKLLLLLLKLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLKLLLKLLKLLLKLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLKLLLKLLKLLLKLLKLLKLLKLL","n":["BE","BigEndian","ByteOrder","LE","LittleEndian","NativeEndian","NetworkEndian","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","default","default","eq","eq","fmt","fmt","from","from","from_slice_f32","from_slice_f32","from_slice_f32","from_slice_f64","from_slice_f64","from_slice_f64","from_slice_i128","from_slice_i16","from_slice_i32","from_slice_i64","from_slice_u128","from_slice_u128","from_slice_u128","from_slice_u16","from_slice_u16","from_slice_u16","from_slice_u32","from_slice_u32","from_slice_u32","from_slice_u64","from_slice_u64","from_slice_u64","hash","hash","into","into","partial_cmp","partial_cmp","read_f32","read_f32_into","read_f32_into_unchecked","read_f64","read_f64_into","read_f64_into_unchecked","read_i128","read_i128_into","read_i16","read_i16_into","read_i24","read_i32","read_i32_into","read_i48","read_i64","read_i64_into","read_int","read_int128","read_u128","read_u128","read_u128","read_u128_into","read_u128_into","read_u128_into","read_u16","read_u16","read_u16","read_u16_into","read_u16_into","read_u16_into","read_u24","read_u32","read_u32","read_u32","read_u32_into","read_u32_into","read_u32_into","read_u48","read_u64","read_u64","read_u64","read_u64_into","read_u64_into","read_u64_into","read_uint","read_uint","read_uint","read_uint128","read_uint128","read_uint128","try_from","try_from","try_into","try_into","type_id","type_id","write_f32","write_f32_into","write_f64","write_f64_into","write_i128","write_i128_into","write_i16","write_i16_into","write_i24","write_i32","write_i32_into","write_i48","write_i64","write_i64_into","write_i8_into","write_int","write_int128","write_u128","write_u128","write_u128","write_u128_into","write_u128_into","write_u128_into","write_u16","write_u16","write_u16","write_u16_into","write_u16_into","write_u16_into","write_u24","write_u32","write_u32","write_u32","write_u32_into","write_u32_into","write_u32_into","write_u48","write_u64","write_u64","write_u64","write_u64_into","write_u64_into","write_u64_into","write_uint","write_uint","write_uint","write_uint128","write_uint128","write_uint128"],"q":[[0,"byteorder"],[156,"core::cmp"],[157,"core::fmt"],[158,"core::fmt"],[159,"core::option"],[160,"core::result"],[161,"core::any"]],"d":["A type alias for <code>BigEndian</code>.","Defines big-endian serialization.","<code>ByteOrder</code> describes types that can serialize integers as …","A type alias for <code>LittleEndian</code>.","Defines little-endian serialization.","Defines system native-endian serialization.","Defines network byte order serialization.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Converts the given slice of IEEE754 single-precision (4 …","","","Converts the given slice of IEEE754 double-precision (8 …","","","Converts the given slice of signed 128 bit integers to a …","Converts the given slice of signed 16 bit integers to a …","Converts the given slice of signed 32 bit integers to a …","Converts the given slice of signed 64 bit integers to a …","Converts the given slice of unsigned 128 bit integers to a …","","","Converts the given slice of unsigned 16 bit integers to a …","","","Converts the given slice of unsigned 32 bit integers to a …","","","Converts the given slice of unsigned 64 bit integers to a …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Reads a signed 128 bit integer from <code>buf</code>.","Reads signed 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 16 bit integer from <code>buf</code>.","Reads signed 16 bit integers from <code>src</code> to <code>dst</code>.","Reads a signed 24 bit integer from <code>buf</code>, stored in i32.","Reads a signed 32 bit integer from <code>buf</code>.","Reads signed 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 48 bit integer from <code>buf</code>, stored in i64.","Reads a signed 64 bit integer from <code>buf</code>.","Reads signed 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads an unsigned 128 bit integer from <code>buf</code>.","","","Reads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 16 bit integer from <code>buf</code>.","","","Reads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 24 bit integer from <code>buf</code>, stored in u32.","Reads an unsigned 32 bit integer from <code>buf</code>.","","","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 48 bit integer from <code>buf</code>, stored in u64.","Reads an unsigned 64 bit integer from <code>buf</code>.","","","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned n-bytes integer from <code>buf</code>.","","","Reads an unsigned n-bytes integer from <code>buf</code>.","","","","","","","","","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes IEEE754 double-precision (8 bytes) floating point …","Writes a signed 128 bit integer <code>n</code> to <code>buf</code>.","Writes signed 128 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 16 bit integer <code>n</code> to <code>buf</code>.","Writes signed 16 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.","Writes a signed 32 bit integer <code>n</code> to <code>buf</code>.","Writes signed 32 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.","Writes a signed 64 bit integer <code>n</code> to <code>buf</code>.","Writes signed 64 bit integers from <code>src</code> into <code>dst</code>.","Writes signed 8 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned 128 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 16 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.","Writes an unsigned 32 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.","Writes an unsigned 64 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","",""],"i":[0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,26,1,2,26,1,2,26,26,26,26,26,1,2,26,1,2,26,1,2,26,1,2,1,2,1,2,1,2,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,1,2,26,1,2,26,1,2,26,1,2,26,26,1,2,26,1,2,26,26,1,2,26,1,2,26,1,2,26,1,2,1,2,1,2,1,2,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,1,2,26,1,2,26,1,2,26,1,2,26,26,1,2,26,1,2,26,26,1,2,26,1,2,26,1,2,26,1,2],"f":[0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[[1,1],3],[[2,2],3],[[],1],[[],2],[[1,1],4],[[2,2],4],[[1,5],6],[[2,5],6],[-1,-1,[]],[-1,-1,[]],[[[8,[7]]],9],[[[8,[7]]],9],[[[8,[7]]],9],[[[8,[10]]],9],[[[8,[10]]],9],[[[8,[10]]],9],[[[8,[11]]],9],[[[8,[12]]],9],[[[8,[13]]],9],[[[8,[14]]],9],[[[8,[15]]],9],[[[8,[15]]],9],[[[8,[15]]],9],[[[8,[16]]],9],[[[8,[16]]],9],[[[8,[16]]],9],[[[8,[17]]],9],[[[8,[17]]],9],[[[8,[17]]],9],[[[8,[18]]],9],[[[8,[18]]],9],[[[8,[18]]],9],[[1,-1],9,19],[[2,-1],9,19],[-1,-2,[],[]],[-1,-2,[],[]],[[1,1],[[20,[3]]]],[[2,2],[[20,[3]]]],[[[8,[21]]],7],[[[8,[21]],[8,[7]]],9],[[[8,[21]],[8,[7]]],9],[[[8,[21]]],10],[[[8,[21]],[8,[10]]],9],[[[8,[21]],[8,[10]]],9],[[[8,[21]]],11],[[[8,[21]],[8,[11]]],9],[[[8,[21]]],12],[[[8,[21]],[8,[12]]],9],[[[8,[21]]],13],[[[8,[21]]],13],[[[8,[21]],[8,[13]]],9],[[[8,[21]]],14],[[[8,[21]]],14],[[[8,[21]],[8,[14]]],9],[[[8,[21]],22],14],[[[8,[21]],22],11],[[[8,[21]]],15],[[[8,[21]]],15],[[[8,[21]]],15],[[[8,[21]],[8,[15]]],9],[[[8,[21]],[8,[15]]],9],[[[8,[21]],[8,[15]]],9],[[[8,[21]]],16],[[[8,[21]]],16],[[[8,[21]]],16],[[[8,[21]],[8,[16]]],9],[[[8,[21]],[8,[16]]],9],[[[8,[21]],[8,[16]]],9],[[[8,[21]]],17],[[[8,[21]]],17],[[[8,[21]]],17],[[[8,[21]]],17],[[[8,[21]],[8,[17]]],9],[[[8,[21]],[8,[17]]],9],[[[8,[21]],[8,[17]]],9],[[[8,[21]]],18],[[[8,[21]]],18],[[[8,[21]]],18],[[[8,[21]]],18],[[[8,[21]],[8,[18]]],9],[[[8,[21]],[8,[18]]],9],[[[8,[21]],[8,[18]]],9],[[[8,[21]],22],18],[[[8,[21]],22],18],[[[8,[21]],22],18],[[[8,[21]],22],15],[[[8,[21]],22],15],[[[8,[21]],22],15],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,24,[]],[-1,24,[]],[[[8,[21]],7],9],[[[8,[7]],[8,[21]]],9],[[[8,[21]],10],9],[[[8,[10]],[8,[21]]],9],[[[8,[21]],11],9],[[[8,[11]],[8,[21]]],9],[[[8,[21]],12],9],[[[8,[12]],[8,[21]]],9],[[[8,[21]],13],9],[[[8,[21]],13],9],[[[8,[13]],[8,[21]]],9],[[[8,[21]],14],9],[[[8,[21]],14],9],[[[8,[14]],[8,[21]]],9],[[[8,[25]],[8,[21]]],9],[[[8,[21]],14,22],9],[[[8,[21]],11,22],9],[[[8,[21]],15],9],[[[8,[21]],15],9],[[[8,[21]],15],9],[[[8,[15]],[8,[21]]],9],[[[8,[15]],[8,[21]]],9],[[[8,[15]],[8,[21]]],9],[[[8,[21]],16],9],[[[8,[21]],16],9],[[[8,[21]],16],9],[[[8,[16]],[8,[21]]],9],[[[8,[16]],[8,[21]]],9],[[[8,[16]],[8,[21]]],9],[[[8,[21]],17],9],[[[8,[21]],17],9],[[[8,[21]],17],9],[[[8,[21]],17],9],[[[8,[17]],[8,[21]]],9],[[[8,[17]],[8,[21]]],9],[[[8,[17]],[8,[21]]],9],[[[8,[21]],18],9],[[[8,[21]],18],9],[[[8,[21]],18],9],[[[8,[21]],18],9],[[[8,[18]],[8,[21]]],9],[[[8,[18]],[8,[21]]],9],[[[8,[18]],[8,[21]]],9],[[[8,[21]],18,22],9],[[[8,[21]],18,22],9],[[[8,[21]],18,22],9],[[[8,[21]],15,22],9],[[[8,[21]],15,22],9],[[[8,[21]],15,22],9]],"c":[53,56],"p":[[4,"BigEndian",0],[4,"LittleEndian",0],[4,"Ordering",156],[15,"bool"],[3,"Formatter",157],[6,"Result",157],[15,"f32"],[15,"slice"],[15,"tuple"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"],[8,"Hasher",158],[4,"Option",159],[15,"u8"],[15,"usize"],[4,"Result",160],[3,"TypeId",161],[15,"i8"],[8,"ByteOrder",0]]},\
"critical_section":{"doc":"critical-section","t":"DIDGDFKLLLLLLLLLLLLLLLLLLLLLLLLLFKLLOLLLLLLLLLLF","n":["CriticalSection","Impl","Mutex","RawRestoreState","RestoreState","acquire","acquire","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_ref","borrow_ref_mut","clone","clone","fmt","fmt","fmt","from","from","from","get_mut","into","into","into","into_inner","invalid","new","new","release","release","replace","replace_with","set_impl","take","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with"],"q":[[0,"critical_section"],[48,"core::cell"],[49,"core::cell"],[50,"core::fmt"],[51,"core::default"],[52,"core::result"],[53,"core::any"]],"d":["Critical section token.","Methods required for a critical section implementation.","A mutex based on critical sections.","Raw, transparent “restore state”.","Opaque “restore state”.","Acquire a critical section in the current thread.","Acquire the critical section.","Borrows the data for the duration of the critical section.","","","","","","","Borrow the data and call <code>RefCell::borrow</code>","Borrow the data and call <code>RefCell::borrow_mut</code>","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a mutable reference to the contained value when the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Unwraps the contained value, consuming the mutex.","Create an invalid, dummy  <code>RestoreState</code>.","Creates a new mutex.","Creates a critical section token.","Release the critical section.","Release the critical section.","Borrow the data and call <code>RefCell::replace</code>","Borrow the data and call <code>RefCell::replace_with</code>","Set the critical section implementation.","Borrow the data and call <code>RefCell::take</code>","","","","","","","","","","Execute closure <code>f</code> in a critical section."],"i":[0,0,0,0,0,0,16,3,3,4,1,3,4,1,3,3,4,1,3,4,1,3,4,1,3,3,4,1,3,1,3,4,0,16,3,3,0,3,3,4,1,3,4,1,3,4,1,0],"f":[0,0,0,0,0,[[],1],[[],2],[[[3,[-1]],4],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[3,[[5,[-1]]]],4],[[6,[-1]]],[]],[[[3,[[5,[-1]]]],4],[[7,[-1]]],[]],[4,4],[1,1],[[[3,[-1]],8],9,10],[[4,8],9],[[1,8],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[3,[-1]]],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[3,[-1]]],-1,[]],[[],1],[-1,[[3,[-1]]],[]],[[],4],[1,11],[2,11],[[[3,[[5,[-1]]]],4,-1],-1,[]],[[[3,[[5,[-1]]]],4,-2],-1,[],12],0,[[[3,[[5,[-1]]]],4],-1,13],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,-2,12,[]]],"c":[],"p":[[3,"RestoreState",0],[6,"RawRestoreState",0],[3,"Mutex",0],[3,"CriticalSection",0],[3,"RefCell",48],[3,"Ref",48],[3,"RefMut",48],[3,"Formatter",49],[6,"Result",49],[8,"Debug",49],[15,"tuple"],[8,"FnOnce",50],[8,"Default",51],[4,"Result",52],[3,"TypeId",53],[8,"Impl",0]]},\
"hash32":{"doc":"32-bit hashing machinery","t":"IDDIIQDLLLLLLKLLLLLLKLLLLLLKLLLLLLLLLLLLLLKLL","n":["BuildHasher","BuildHasherDefault","FnvHasher","Hash","Hasher","Hasher","Murmur3Hasher","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build_hasher","build_hasher","clone","default","default","default","eq","finish","finish","finish","fmt","from","from","from","hash","hash_slice","into","into","into","new","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write","write"],"q":[[0,"hash32"],[45,"core::default"],[46,"core::fmt"],[47,"core::fmt"],[48,"core::result"],[49,"core::any"]],"d":["See <code>core::hash::BuildHasher</code> for details","See <code>core::hash::BuildHasherDefault</code> for details","32-bit Fowler-Noll-Vo hasher","See <code>core::hash::Hash</code> for details","See <code>core::hash::Hasher</code> for details","See <code>core::hash::BuildHasher::Hasher</code>","32-bit MurmurHash3 hasher","","","","","","","See <code>core::hash::BuildHasher.build_hasher</code>","","","","","","","See <code>core::hash::Hasher.finish</code>","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Feeds this value into the given <code>Hasher</code>.","Feeds a slice of this type into the given <code>Hasher</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>const</code> constructor","","","","","","","","","","See <code>core::hash::Hasher.write</code>","",""],"i":[0,0,0,0,0,16,0,4,5,1,4,5,1,16,1,1,4,5,1,1,3,4,5,1,4,5,1,17,17,4,5,1,1,4,5,1,4,5,1,4,5,1,3,4,5],"f":[0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[[[1,[-1]]],[],[2,3]],[[[1,[-1]]],[[1,[-1]]],[2,3]],[[],4],[[],5],[[],[[1,[-1]]],[2,3]],[[[1,[-1]],[1,[-1]]],6,[2,3]],[-1,7,[]],[4,7],[5,7],[[[1,[-1]],8],9,[2,3]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-2],10,[],3],[[[11,[-1]],-2],10,12,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[1,[-1]]],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[[-1,[11,[15]]],10,[]],[[4,[11,[15]]],10],[[5,[11,[15]]],10]],"c":[],"p":[[3,"BuildHasherDefault",0],[8,"Default",45],[8,"Hasher",0],[3,"FnvHasher",0],[3,"Murmur3Hasher",0],[15,"bool"],[15,"u32"],[3,"Formatter",46],[6,"Result",46],[15,"tuple"],[15,"slice"],[8,"Sized",47],[4,"Result",48],[3,"TypeId",49],[15,"u8"],[8,"BuildHasher",0],[8,"Hash",0]]},\
"heapless":{"doc":"<code>static</code> friendly data structures that don’t require …","t":"CCDEGGDDDDNDDCDNDDLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDIEEDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDIDDDDDDDILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["BinaryHeap","Bucket","Deque","Entry","FnvIndexMap","FnvIndexSet","HistoryBuffer","IndexMap","IndexSet","LinearMap","Occupied","OccupiedEntry","OldestOrdered","Pos","String","Vacant","VacantEntry","Vec","as_mut","as_mut","as_mut_ptr","as_mut_slices","as_mut_str","as_mut_vec","as_ptr","as_ref","as_ref","as_ref","as_ref","as_ref","as_slice","as_slice","as_slices","as_str","back","back_mut","binary_heap","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","capacity","capacity","capacity","capacity","capacity","capacity","clear","clear","clear","clear","clear","clear","clear","clear_with","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","contains","contains_key","contains_key","default","default","default","default","default","default","default","deref","deref","deref","deref_mut","deref_mut","difference","drop","drop","drop","drop","ends_with","entry","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend_from_slice","extend_from_slice","first","first","first_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_slice","from_str","front","front_mut","get","get","get","get_mut","get_mut","get_mut","hash","hash","hash","hash","index","index","index_mut","index_mut","insert","insert","insert","insert","insert","insert","intersection","into","into","into","into","into","into","into","into","into","into","into","into_array","into_bytes","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_mut","is_disjoint","is_empty","is_empty","is_empty","is_empty","is_empty","is_full","is_full","is_subset","is_superset","iter","iter","iter","iter","iter_mut","iter_mut","iter_mut","key","key","keys","keys","last","last","last_mut","len","len","len","len","len","ne","ne","ne","new","new","new","new","new","new","new","new_with","next","oldest_ordered","partial_cmp","partial_cmp","pop","pop","pop_back","pop_back_unchecked","pop_front","pop_front_unchecked","pop_unchecked","push","push","push_back","push_back_unchecked","push_front","push_front_unchecked","push_str","push_unchecked","recent","remove","remove","remove","remove","remove","remove_entry","resize","resize_default","retain","retain_mut","set_len","sorted_linked_list","starts_with","swap_remove","swap_remove","swap_remove_unchecked","symmetric_difference","truncate","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","values","values","values_mut","values_mut","write","write_char","write_str","write_str","BinaryHeap","Kind","Max","Min","PeekMut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","default","deref","deref_mut","drop","fmt","from","from","from","from","into","into","into","into","into_iter","into_vec","is_empty","iter","iter_mut","len","new","peek","peek_mut","pop","pop","pop_unchecked","push","push_unchecked","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","FindMut","Iter","Kind","LinkedIndexU16","LinkedIndexU8","LinkedIndexUsize","Max","Min","Node","SortedLinkedList","SortedLinkedListIndex","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","cmp","cmp","deref","deref_mut","drop","drop","eq","eq","eq","find_mut","finish","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into_iter","is_empty","is_full","iter","new_u16","new_u8","new_usize","next","partial_cmp","partial_cmp","partial_cmp","peek","pop","pop","pop_unchecked","push","push_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"heapless"],[340,"heapless::binary_heap"],[395,"heapless::sorted_linked_list"],[505,"core::option"],[506,"core::cmp"],[507,"hash32"],[508,"hash32"],[509,"core::clone"],[510,"core::cmp"],[511,"core::default"],[512,"core::cmp"],[513,"core::result"],[514,"core::fmt"],[515,"core::fmt"],[516,"core::hash"],[517,"hash32"],[518,"core::any"],[519,"core::fmt"],[520,"core::slice::iter"]],"d":["","","A fixed capacity double-ended queue.","A view into an entry in the map","A <code>heapless::IndexMap</code> using the default FNV hasher","A <code>heapless::IndexSet</code> using the default FNV hasher. A list …","A “history buffer”, similar to a write-only ring …","Fixed capacity <code>IndexMap</code>","Fixed capacity <code>IndexSet</code>.","A fixed capacity map / dictionary that performs lookups …","The entry corresponding to the key <code>K</code> exists in the map","An occupied entry which can be manipulated","An iterator on the underlying buffer ordered from oldest …","","A fixed capacity <code>String</code>","The entry corresponding to the key <code>K</code> does not exist in the …","A view into an empty slot in the underlying map","A fixed capacity <code>Vec</code>","","","Returns a raw pointer to the vector’s buffer, which may …","Returns a pair of mutable slices which contain, in order, …","Converts a <code>String</code> into a mutable string slice.","Returns a mutable reference to the contents of this <code>String</code>.","Returns a raw pointer to the vector’s buffer.","","","","","","Returns the array slice backing the buffer, without …","Extracts a slice containing the entire vector.","Returns a pair of slices which contain, in order, the …","Extracts a string slice containing the entire string.","Provides a reference to the back element, or None if the …","Provides a mutable reference to the back element, or None …","A priority queue implemented with a binary heap.","","","","","","","","","","","","","","","","","","","","","","","Returns the maximum number of elements the deque can hold.","Returns the capacity of the buffer, which is the length of …","Returns the number of elements the map can hold","Returns the number of elements the set can hold","Returns the number of elements that the map can hold","Returns the maximum number of elements the String can hold","Returns the maximum number of elements the vector can hold.","Clears the deque, removing all values.","Clears the buffer, replacing every element with the …","Remove all key-value pairs in the map, while preserving …","Clears the set, removing all values.","Clears the map, removing all key-value pairs","Truncates this <code>String</code>, removing all contents.","Clears the vector, removing all values.","Clears the buffer, replacing every element with the given …","","","","","","","","","","Returns <code>true</code> if the set contains a value.","Returns true if the map contains a value for the specified …","Returns true if the map contains a value for the specified …","","","","","","","","","","","","","Visits the values representing the difference, i.e. the …","","","","","Returns <code>true</code> if <code>needle</code> is a suffix of the Vec.","Returns an entry for the corresponding key","","","","","","","","","","","","","","","","","","","","Extends the vec from an iterator.","","Clones and writes all elements in a slice to the buffer.","Clones and appends all elements in a slice to the <code>Vec</code>.","Get the first key-value pair","Get the first value","Get the first key-value pair, with mutable access to the …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Constructs a new vector with a fixed capacity of <code>N</code> and …","","Provides a reference to the front element, or None if the …","Provides a mutable reference to the front element, or None …","Gets a reference to the value associated with this entry","Returns a reference to the value corresponding to the key.","Returns a reference to the value corresponding to the key","Gets a mutable reference to the value associated with this …","Returns a mutable reference to the value corresponding to …","Returns a mutable reference to the value corresponding to …","","","","","","","","","Overwrites the underlying map’s value with this entry’…","Inserts this entry into to underlying map, yields a …","Inserts a key-value pair into the map.","Adds a value to the set.","Inserts a key-value pair into the map.","Inserts an element at position <code>index</code> within the vector, …","Visits the values representing the intersection, i.e. the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the contents of the vector as an array of length <code>M</code> …","Converts a <code>String</code> into a byte vector.","","","","","","","","","","","","","Consumes this entry to yield to key associated with it","Consumes this entry and yields a reference to the …","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …","Returns whether the deque is empty.","Returns true if the map contains no elements.","Returns <code>true</code> if the set contains no elements.","Returns true if the map contains no elements","Returns true if the vec is empty","Returns whether the deque is full (i.e. if …","Returns true if the vec is full","Returns <code>true</code> if the set is a subset of another, i.e. <code>other</code> …","Examples","Returns an iterator over the deque.","Return an iterator over the key-value pairs of the map, in …","Return an iterator over the values of the set, in their …","An iterator visiting all key-value pairs in arbitrary …","Returns an iterator that allows modifying each value.","Return an iterator over the key-value pairs of the map, in …","An iterator visiting all key-value pairs in arbitrary …","Gets a reference to the key that this entity corresponds to","Get the key associated with this entry","Return an iterator over the keys of the map, in their order","An iterator visiting all keys in arbitrary order","Get the last key-value pair","Get the last value","Get the last key-value pair, with mutable access to the …","Returns the number of elements currently in the deque.","Returns the current fill level of the buffer.","Return the number of key-value pairs in the map.","Returns the number of elements in the set.","Returns the number of elements in this map","","","","Constructs a new, empty deque with a fixed capacity of <code>N</code>","Constructs a new history buffer.","Creates an empty <code>IndexMap</code>.","Creates an empty <code>IndexSet</code>","Creates an empty <code>LinearMap</code>","Constructs a new, empty <code>String</code> with a fixed capacity of <code>N</code> …","Constructs a new, empty vector with a fixed capacity of <code>N</code>","Constructs a new history buffer, where every element is …","","Returns an iterator for iterating over the buffer from …","","","Removes the last character from the string buffer and …","Removes the last element from a vector and returns it, or …","Removes the item from the back of the deque and returns …","Removes an item from the back of the deque and returns it, …","Removes the item from the front of the deque and returns …","Removes an item from the front of the deque and returns …","Removes the last element from a vector and returns it","Appends the given <code>char</code> to the end of this <code>String</code>.","Appends an <code>item</code> to the back of the collection","Appends an <code>item</code> to the back of the deque","Appends an <code>item</code> to the back of the deque","Appends an <code>item</code> to the front of the deque","Appends an <code>item</code> to the front of the deque","Appends a given string slice onto the end of this <code>String</code>.","Appends an <code>item</code> to the back of the collection","Returns a reference to the most recently written value.","Removes this entry from the map and yields its value","Same as <code>swap_remove</code>","Removes a value from the set. Returns <code>true</code> if the value …","Removes a key from the map, returning the value at the key …","Removes and returns the element at position <code>index</code> within …","Removes this entry from the map and yields its …","Resizes the Vec in-place so that len is equal to new_len.","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate, …","Forces the length of the vector to <code>new_len</code>.","A fixed sorted priority linked list, similar to <code>BinaryHeap</code> …","Returns <code>true</code> if <code>needle</code> is a prefix of the Vec.","Remove the key-value pair equivalent to <code>key</code> and return its …","Removes an element from the vector and returns it.","Removes an element from the vector and returns it.","Visits the values representing the symmetric difference, …","Shortens this <code>String</code> to the specified length.","Shortens the vector, keeping the first <code>len</code> elements and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Visits the values representing the union, i.e. all the …","Return an iterator over the values of the map, in their …","An iterator visiting all values in arbitrary order","Return an iterator over mutable references to the the …","An iterator visiting all values mutably in arbitrary order","Writes an element to the buffer, overwriting the oldest …","","","","A priority queue implemented with a binary heap.","The binary heap kind: min-heap or max-heap","Max-heap","Min-heap","Structure wrapping a mutable reference to the greatest …","","","","","","","","","Returns the capacity of the binary heap.","Drops all items from the binary heap.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns the underlying <code>Vec&lt;T,N&gt;</code>. Order is arbitrary and …","Checks if the binary heap is empty.","Returns an iterator visiting all values in the underlying …","Returns a mutable iterator visiting all values in the …","Returns the length of the binary heap.","Creates an empty BinaryHeap as a $K-heap.","Returns the <em>top</em> (greatest if max-heap, smallest if …","Returns a mutable reference to the greatest item in the …","Removes the <em>top</em> (greatest if max-heap, smallest if …","Removes the peeked value from the heap and returns it.","Removes the <em>top</em> (greatest if max-heap, smallest if …","Pushes an item onto the binary heap.","Pushes an item onto the binary heap without first checking …","","","","","","","","","","","","","Comes from <code>SortedLinkedList::find_mut</code>.","Iterator for the linked list.","The linked list kind: min-list or max-list","Index for the <code>SortedLinkedList</code> with specific backing …","Index for the <code>SortedLinkedList</code> with specific backing …","Index for the <code>SortedLinkedList</code> with specific backing …","Marker for Max sorted <code>SortedLinkedList</code>.","Marker for Min sorted <code>SortedLinkedList</code>.","A node in the <code>SortedLinkedList</code>.","The linked list.","Trait for defining an index for the linked list, never …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Find an element in the list that can be changed and …","This will resort the element into the correct position in …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if the linked list is empty.","Checks if the linked list is full.","Get an iterator over the sorted list.","Create a new linked list.","Create a new linked list.","Create a new linked list.","","","","","Peek at the first element.","Pops the first element in the list.","This will pop the element from the list.","Pop an element from the list without checking so the list …","Pushes an element to the linked list and sorts it into …","Pushes a value onto the list without checking if the list …","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,27,0,0,0,0,27,0,0,1,1,1,3,5,5,1,8,5,5,1,1,8,1,3,5,3,3,0,3,8,27,41,45,11,15,16,5,1,19,3,8,27,41,45,11,15,16,5,1,19,3,8,11,15,16,5,1,3,8,11,15,16,5,1,8,3,11,15,16,5,1,19,5,1,15,11,16,3,8,11,15,16,5,1,8,5,1,5,1,15,3,8,16,1,1,11,11,15,16,5,5,5,1,1,1,1,1,1,8,8,11,11,15,15,1,1,1,8,1,11,15,11,3,8,11,15,16,5,5,1,3,8,27,41,45,11,15,16,5,5,5,5,5,5,5,5,5,5,1,19,11,15,16,5,5,5,1,1,5,3,3,41,11,16,41,11,16,5,5,1,1,11,16,11,16,41,45,11,15,16,1,15,3,8,27,41,45,11,15,16,5,1,19,1,5,3,3,3,11,11,11,15,16,1,1,1,19,45,41,15,3,11,15,16,1,3,1,15,15,3,11,15,16,3,11,16,41,45,11,16,11,15,11,3,8,11,15,16,5,5,5,3,8,11,15,16,5,1,8,19,8,5,1,5,1,3,3,3,3,1,5,1,3,3,3,3,5,1,8,41,11,15,16,1,41,1,1,1,1,1,0,1,11,1,1,15,5,1,3,8,27,41,45,11,15,16,5,1,1,19,3,8,27,41,45,11,15,16,5,1,19,3,8,27,41,45,11,15,16,5,1,19,15,11,16,11,16,8,5,5,1,0,0,0,0,0,66,67,53,55,66,67,53,55,53,53,53,53,55,55,55,53,66,67,53,55,66,67,53,55,53,53,53,53,53,53,53,53,53,53,55,53,53,53,66,67,53,55,66,67,53,55,66,67,53,55,0,0,0,0,0,0,0,0,0,0,0,68,69,70,64,65,61,58,59,60,68,69,70,64,65,61,58,59,60,58,59,60,58,59,60,61,61,64,61,58,59,60,64,61,64,58,59,60,68,69,70,64,65,61,58,59,60,68,69,70,64,65,61,58,59,60,65,64,64,64,64,64,64,65,58,59,60,64,64,61,64,64,64,68,69,70,64,65,61,58,59,60,68,69,70,64,65,61,58,59,60,68,69,70,64,65,61,58,59,60],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[1,[-1]]],[[1,[-1]]],[]],[[[1,[-1]]],[[2,[-1]]],[]],[[[1,[-1]]],[],[]],[[[3,[-1]]],[[4,[[2,[-1]],[2,[-1]]]]],[]],[5,6],[5,[[1,[7]]]],[[[1,[-1]]],[],[]],[[[8,[-1]]],[[2,[-1]]],[]],[5,[[2,[7]]]],[5,6],[[[1,[-1]]],[[1,[-1]]],[]],[[[1,[-1]]],[[2,[-1]]],[]],[[[8,[-1]]],[[2,[-1]]],[]],[[[1,[-1]]],[[2,[-1]]],[]],[[[3,[-1]]],[[4,[[2,[-1]],[2,[-1]]]]],[]],[5,6],[[[3,[-1]]],[[9,[-1]]],[]],[[[3,[-1]]],[[9,[-1]]],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[3,[-1]]],10,[]],[[[8,[-1]]],10,[]],[[[11,[-1,-2,-3]]],10,[12,13],[],14],[[[15,[-1,-2]]],10,[12,13],14],[[[16,[-1,-2]]],10,12,[]],[5,10],[[[1,[-1]]],10,[]],[[[3,[-1]]],4,[]],[[[8,[-1]]],4,[]],[[[11,[-1,-2,-3]]],4,[12,13],[],14],[[[15,[-1,-2]]],4,[12,13],14],[[[16,[-1,-2]]],4,12,[]],[5,4],[[[1,[-1]]],4,[]],[[[8,[-1]],-1],4,[17,18]],[[[3,[-1]]],[[3,[-1]]],18],[[[11,[-1,-2,-3]]],[[11,[-1,-2,-3]]],[12,13,18],18,18],[[[15,[-1,-2]]],[[15,[-1,-2]]],[12,13,18],18],[[[16,[-1,-2]]],[[16,[-1,-2]]],[12,18],18],[5,5],[[[1,[-1]]],[[1,[-1]]],18],[[[19,[-1]]],[[19,[-1]]],18],[[5,5],20],[[[1,[-1]],[1,[-1]]],20,21],[[[15,[-2,-3]],-1],22,[23,12,13],[[24,[-1]],12,13],14],[[[11,[-2,-3,-4]],-1],22,[23,12,13],[[24,[-1]],12,13],[],14],[[[16,[-1,-2]],-1],22,12,[]],[[],[[3,[-1]]],[]],[[],[[8,[-1]]],[]],[[],[[11,[-1,-2,-3]]],[12,13],[],[14,25]],[[],[[15,[-1,-2]]],[12,13],[14,25]],[[],[[16,[-1,-2]]],12,[]],[[],5],[[],[[1,[-1]]],[]],[[[8,[-1]]],[[2,[-1]]],[]],[5,6],[[[1,[-1]]],[[2,[-1]]],[]],[5,6],[[[1,[-1]]],[[2,[-1]]],[]],[[[15,[-1,-2]],[15,[-1,-3]]],[[0,[-1,-3]]],[12,13],14,14],[[[3,[-1]]],4,[]],[[[8,[-1]]],4,[]],[[[16,[-1,-2]]],4,[],[]],[[[1,[-1]]],4,[]],[[[1,[-1]],[2,[-1]]],22,26],[[[11,[-1,-2,-3]],-1],[[27,[-1,-2]]],[12,13],[],14],[[[11,[-1,-2,-3]],[11,[-1,-2,-4]]],22,[12,13],12,14,14],[[[15,[-1,-2]],[15,[-1,-3]]],22,[12,13],14,14],[[[16,[-1,-2]],[16,[-1,-2]]],22,12,26],[[5,6],22],[[5,6],22],[[5,5],22],[[[1,[-2]],[2,[-1]]],22,[],[[26,[-1]]]],[[[1,[-2]],[28,[-1]]],22,[],[[26,[-1]]]],[[[1,[-2]],[2,[-1]]],22,[],[[26,[-1]]]],[[[1,[-2]],[1,[-1]]],22,[],[[26,[-1]]]],[[[1,[-2]],[2,[-1]]],22,[],[[26,[-1]]]],[[[1,[-2]],[28,[-1]]],22,[],[[26,[-1]]]],[[[8,[-1]],-2],4,[],29],[[[8,[-1]],-2],4,18,29],[[[11,[-1,-2,-3]],-4],4,[12,13,17],17,14,29],[[[11,[-1,-2,-3]],-4],4,[12,13],[],14,29],[[[15,[-1,-2]],-3],4,[12,13,17],14,29],[[[15,[-1,-2]],-3],4,[12,13],14,29],[[[1,[-1]],-2],4,[],29],[[[1,[-1]],-2],4,[],29],[[[1,[-1]],-2],4,17,29],[[[8,[-1]],[2,[-1]]],4,18],[[[1,[-1]],[2,[-1]]],[[30,[4,4]]],18],[[[11,[-1,-2,-3]]],[[9,[[4,[-1,-2]]]]],[12,13],[],14],[[[15,[-1,-2]]],[[9,[-1]]],[12,13],14],[[[11,[-1,-2,-3]]],[[9,[[4,[-1,-2]]]]],[12,13],[],14],[[[3,[-1]],31],32,33],[[[8,[-1]],31],32,33],[[[11,[-1,-2,-3]],31],32,[12,13,33],33,14],[[[15,[-1,-2]],31],32,[12,13,33],14],[[[16,[-1,-2]],31],32,[12,33],33],[[5,31],32],[[5,31],32],[[[1,[-1]],31],32,33],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[34,5],[7,5],[6,5],[-1,-1,[]],[35,5],[36,5],[37,5],[38,5],[39,5],[40,5],[-1,-1,[]],[-1,-1,[]],[-1,[[11,[-2,-3,-4]]],29,[12,13],[],[14,25]],[-1,[[15,[-2,-3]]],29,[12,13],[14,25]],[-1,[[16,[-2,-3]]],29,12,[]],[-1,5,29],[-1,5,29],[-1,5,29],[-1,[[1,[-2]]],29,[]],[[[2,[-1]]],[[30,[[1,[-1]],4]]],18],[6,[[30,[5]]]],[[[3,[-1]]],[[9,[-1]]],[]],[[[3,[-1]]],[[9,[-1]]],[]],[[[41,[-1,-2]]],-2,[12,13],[]],[[[11,[-2,-3,-4]],-1],[[9,[-3]]],[23,13,12],[[24,[-1]],12,13],[],14],[[[16,[-2,-3]],-1],[[9,[-3]]],[12,23],[[24,[-1]],12],[]],[[[41,[-1,-2]]],-2,[12,13],[]],[[[11,[-2,-3,-4]],-1],[[9,[-3]]],[23,13,12],[[24,[-1]],12,13],[],14],[[[16,[-2,-3]],-1],[[9,[-3]]],[12,23],[[24,[-1]],12],[]],[[5,-1],4,42],[[5,-1],4,43],[[[1,[-1]],-2],4,44,43],[[[1,[-1]],-2],4,13,42],[[[11,[-2,-3,-4]],-1],-3,[23,12,13],[12,13,[24,[-1]]],[],14],[[[16,[-2,-3]],-1],-3,[12,23],[[24,[-1]],12],[]],[[[11,[-2,-3,-4]],-1],-3,[23,12,13],[12,13,[24,[-1]]],[],14],[[[16,[-2,-3]],-1],-3,[12,23],[[24,[-1]],12],[]],[[[41,[-1,-2]],-2],-2,[12,13],[]],[[[45,[-1,-2]],-2],[[30,[-2,-2]]],[12,13],[]],[[[11,[-1,-2,-3]],-1,-2],[[30,[[9,[-2]],[4,[-1,-2]]]]],[12,13],[],14],[[[15,[-1,-2]],-1],[[30,[22,-1]]],[12,13],14],[[[16,[-1,-2]],-1,-2],[[30,[[9,[-2]],[4,[-1,-2]]]]],12,[]],[[[1,[-1]],10,-1],[[30,[4,-1]]],[]],[[[15,[-1,-2]],[15,[-1,-3]]],[[0,[-1,-3]]],[12,13],14,14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[[30,[[28,[-1]],[1,[-1]]]]],[]],[5,[[1,[7]]]],[[[3,[-1]]],[],[]],[[[3,[-1]]],[],[]],[[[3,[-1]]],[],[]],[[[11,[-1,-2,-3]]],[],[12,13],[],14],[[[11,[-1,-2,-3]]],[],[12,13],[],14],[[[11,[-1,-2,-3]]],[],[12,13],[],14],[[[15,[-1,-2]]],[],[12,13],14],[[[16,[-1,-2]]],[],12,[]],[[[1,[-1]]],[],[]],[[[1,[-1]]],[],[]],[[[1,[-1]]],[],[]],[-1,-2,[],[]],[[[45,[-1,-2]]],-1,[12,13],[]],[[[41,[-1,-2]]],-2,[12,13],[]],[[[15,[-1,-2]],[15,[-1,-3]]],22,[12,13],14,14],[[[3,[-1]]],22,[]],[[[11,[-1,-2,-3]]],22,[12,13],[],14],[[[15,[-1,-2]]],22,[12,13],14],[[[16,[-1,-2]]],22,12,[]],[[[1,[-1]]],22,[]],[[[3,[-1]]],22,[]],[[[1,[-1]]],22,[]],[[[15,[-1,-2]],[15,[-1,-3]]],22,[12,13],14,14],[[[15,[-1,-2]],[15,[-1,-3]]],22,[12,13],14,14],[[[3,[-1]]],[[0,[-1]]],[]],[[[11,[-1,-2,-3]]],[[0,[-1,-2]]],[12,13],[],14],[[[15,[-1,-2]]],[[0,[-1]]],[12,13],14],[[[16,[-1,-2]]],[[0,[-1,-2]]],12,[]],[[[3,[-1]]],[[0,[-1]]],[]],[[[11,[-1,-2,-3]]],[[0,[-1,-2]]],[12,13],[],14],[[[16,[-1,-2]]],[[0,[-1,-2]]],12,[]],[[[41,[-1,-2]]],-1,[12,13],[]],[[[45,[-1,-2]]],-1,[12,13],[]],[[[11,[-1,-2,-3]]],[[0,[46]]],[12,13],[],14],[[[16,[-1,-2]]],[[0,[46]]],12,[]],[[[11,[-1,-2,-3]]],[[9,[[4,[-1,-2]]]]],[12,13],[],14],[[[15,[-1,-2]]],[[9,[-1]]],[12,13],14],[[[11,[-1,-2,-3]]],[[9,[[4,[-1,-2]]]]],[12,13],[],14],[[[3,[-1]]],10,[]],[[[8,[-1]]],10,[]],[[[11,[-1,-2,-3]]],10,[12,13],[],14],[[[15,[-1,-2]]],10,[12,13],14],[[[16,[-1,-2]]],10,12,[]],[[5,5],22],[[5,6],22],[[5,6],22],[[],[[3,[-1]]],[]],[[],[[8,[-1]]],[]],[[],[[11,[-1,-2,[47,[-3]]]]],[],[],[]],[[],[[15,[-1,[47,[-2]]]]],[],[]],[[],[[16,[-1,-2]]],[],[]],[[],5],[[],[[1,[-1]]],[]],[-1,[[8,[-1]]],[17,18]],[[[19,[-1]]],[[9,[-1]]],[]],[[[8,[-1]]],[[19,[-1]]],[]],[[5,5],[[9,[20]]]],[[[1,[-1]],[1,[-1]]],[[9,[20]]],48],[5,[[9,[49]]]],[[[1,[-1]]],[[9,[-1]]],[]],[[[3,[-1]]],[[9,[-1]]],[]],[[[3,[-1]]],-1,[]],[[[3,[-1]]],[[9,[-1]]],[]],[[[3,[-1]]],-1,[]],[[[1,[-1]]],-1,[]],[[5,49],[[30,[4,4]]]],[[[1,[-1]],-1],[[30,[4,-1]]],[]],[[[3,[-1]],-1],[[30,[4,-1]]],[]],[[[3,[-1]],-1],4,[]],[[[3,[-1]],-1],[[30,[4,-1]]],[]],[[[3,[-1]],-1],4,[]],[[5,6],[[30,[4,4]]]],[[[1,[-1]],-1],4,[]],[[[8,[-1]]],[[9,[-1]]],[]],[[[41,[-1,-2]]],-2,[12,13],[]],[[[11,[-2,-3,-4]],-1],[[9,[-3]]],[23,13,12],[[24,[-1]],12,13],[],14],[[[15,[-2,-3]],-1],22,[23,12,13],[[24,[-1]],12,13],14],[[[16,[-2,-3]],-1],[[9,[-3]]],[12,23],[[24,[-1]],12],[]],[[[1,[-1]],10],-1,[]],[[[41,[-1,-2]]],[[4,[-1,-2]]],[12,13],[]],[[[1,[-1]],10,-1],[[30,[4,4]]],18],[[[1,[-1]],10],[[30,[4,4]]],[18,25]],[[[1,[-1]],-2],4,[],50],[[[1,[-1]],-2],4,[],50],[[[1,[-1]],10],4,[]],0,[[[1,[-1]],[2,[-1]]],22,26],[[[11,[-2,-3,-4]],-1],[[9,[-3]]],[23,13,12],[[24,[-1]],12,13],[],14],[[[1,[-1]],10],-1,[]],[[[1,[-1]],10],-1,[]],[[[15,[-1,-2]],[15,[-1,-3]]],[[0,[46]]],[12,13],14,14],[[5,10],4],[[[1,[-1]],10],4,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[[[2,[-1]]],[[30,[[1,[-1]]]]],18],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[[[15,[-1,-2]],[15,[-1,-3]]],[[0,[46]]],[12,13],14,14],[[[11,[-1,-2,-3]]],[[0,[46]]],[12,13],[],14],[[[16,[-1,-2]]],[[0,[46]]],12,[]],[[[11,[-1,-2,-3]]],[[0,[46]]],[12,13],[],14],[[[16,[-1,-2]]],[[0,[46]]],12,[]],[[[8,[-1]],-1],4,[]],[[5,49],[[30,[4,52]]]],[[5,6],[[30,[4,52]]]],[[[1,[7]],6],32],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[53,[-1,-2]]],10,21,54],[[[53,[-1,-2]]],4,21,54],[[[53,[-1,-2]]],[[53,[-1,-2]]],[21,18],54],[[],[[53,[-1,-2]]],21,54],[[[55,[-1,-2]]],-1,21,54],[[[55,[-1,-2]]],-1,21,54],[[[55,[-1,-2]]],4,21,54],[[[53,[-1,-2]],31],32,[21,33],54],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[53,[-1,-2]]],[],21,54],[[[53,[-1,-2]]],[[1,[-1]]],21,54],[[[53,[-1,-2]]],22,21,54],[[[53,[-1,-2]]],[[56,[-1]]],21,54],[[[53,[-1,-2]]],[[57,[-1]]],21,54],[[[53,[-1,-2]]],10,21,54],[[],[[53,[-1,-2]]],[],[]],[[[53,[-1,-2]]],[[9,[-1]]],21,54],[[[53,[-1,-2]]],[[9,[[55,[-1,-2]]]]],21,54],[[[53,[-1,-2]]],[[9,[-1]]],21,54],[[[55,[-1,-2]]],-1,21,54],[[[53,[-1,-2]]],-1,21,54],[[[53,[-1,-2]],-1],[[30,[4,-1]]],21,54],[[[53,[-1,-2]],-1],4,21,54],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[58,58],[59,59],[60,60],[[58,58],20],[[59,59],20],[[60,60],20],[[[61,[-1,-2,-3]]],[],21,62,63],[[[61,[-1,-2,-3]]],[],21,62,63],[[[64,[-1,-2,-3]]],4,[],62,[]],[[[61,[-1,-2,-3]]],4,21,62,63],[[58,58],22],[[59,59],22],[[60,60],22],[[[64,[-1,-2,-3]],-4],[[9,[[61,[-1,-2,-3]]]]],21,62,63,50],[[[61,[-1,-2,-3]]],4,21,62,63],[[[64,[-1,-2,-3]],31],32,[21,33],62,63],[[58,31],32],[[59,31],32],[[60,31],32],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[64,[-1,-2,-3]]],22,21,62,63],[[[64,[-1,-2,-3]]],22,21,62,63],[[[64,[-1,-2,-3]]],[[65,[-1,-2,-3]]],21,62,63],[[],[[64,[-1,59,-2]]],[],[]],[[],[[64,[-1,58,-2]]],[],[]],[[],[[64,[-1,60,-2]]],[],[]],[[[65,[-1,-2,-3]]],9,21,62,63],[[58,58],[[9,[20]]]],[[59,59],[[9,[20]]]],[[60,60],[[9,[20]]]],[[[64,[-1,-2,-3]]],[[9,[-1]]],21,62,63],[[[64,[-1,-2,-3]]],[[30,[-1,4]]],21,62,63],[[[61,[-1,-2,-3]]],-1,21,62,63],[[[64,[-1,-2,-3]]],-1,21,62,63],[[[64,[-1,-2,-3]],-1],[[30,[4,-1]]],21,62,63],[[[64,[-1,-2,-3]],-1],4,21,62,63],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]]],"c":[],"p":[[3,"Vec",0],[15,"slice"],[3,"Deque",0],[15,"tuple"],[3,"String",0],[15,"str"],[15,"u8"],[3,"HistoryBuffer",0],[4,"Option",505],[15,"usize"],[3,"IndexMap",0],[8,"Eq",506],[8,"Hash",507],[8,"BuildHasher",507],[3,"IndexSet",0],[3,"LinearMap",0],[8,"Copy",508],[8,"Clone",509],[3,"OldestOrdered",0],[4,"Ordering",506],[8,"Ord",506],[15,"bool"],[8,"Sized",508],[8,"Borrow",510],[8,"Default",511],[8,"PartialEq",506],[4,"Entry",0],[15,"array"],[8,"IntoIterator",512],[4,"Result",513],[3,"Formatter",514],[6,"Result",514],[8,"Debug",514],[15,"u16"],[15,"u64"],[15,"u32"],[15,"i32"],[15,"i8"],[15,"i64"],[15,"i16"],[3,"OccupiedEntry",0],[8,"Hasher",507],[8,"Hasher",515],[8,"Hash",515],[3,"VacantEntry",0],[8,"Iterator",516],[3,"BuildHasherDefault",507],[8,"PartialOrd",506],[15,"char"],[8,"FnMut",517],[3,"TypeId",518],[3,"Error",514],[3,"BinaryHeap",340],[8,"Kind",340],[3,"PeekMut",340],[3,"Iter",519],[3,"IterMut",519],[3,"LinkedIndexU8",395],[3,"LinkedIndexU16",395],[3,"LinkedIndexUsize",395],[3,"FindMut",395],[8,"SortedLinkedListIndex",395],[8,"Kind",395],[3,"SortedLinkedList",395],[3,"Iter",395],[4,"Min",340],[4,"Max",340],[3,"Min",395],[3,"Max",395],[3,"Node",395]]},\
"panic_halt":{"doc":"Set the panicking behavior to halt","t":"","n":[],"q":[],"d":[],"i":[],"f":[],"c":[],"p":[]},\
"stable_deref_trait":{"doc":"This module defines an unsafe marker trait, StableDeref, …","t":"II","n":["CloneStableDeref","StableDeref"],"q":[[0,"stable_deref_trait"]],"d":["An unsafe marker trait for types where clones deref to the …","An unsafe marker trait for types that deref to a stable …"],"i":[0,0],"f":[0,0],"c":[],"p":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
